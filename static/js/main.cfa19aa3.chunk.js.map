{"version":3,"sources":["sortingAlgos.js","Numbers.js","App.js","index.js"],"names":["sortingAlgos","bubbleSort","nums","numActions","numbers","swapped","i","length","numAction","indices","swap","num1","num2","push","insertionSort","curIdx","targetIdx","curNumber","idx","Numbers","useState","setNumbers","numbersTotal","sortingAlgo","setSortingAlgo","animeSpeed","animeProgressID","setAnimeProgressID","colorBlue","resetNumbers","clearInterval","barStyle","document","getElementById","style","backgroundColor","disabled","newNumbers","newNumber","Math","floor","random","setBarColor","color","setBarHeight","height","borderTopWidth","useEffect","console","log","id","map","number","className","borderTop","width","onClick","algo","actions","lastAction","intervalID","setInterval","action","shift","undefined","height1","height2","sortingAnime","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.cfa19aa3.chunk.js","sourcesContent":["const sortingAlgos = {\r\n  bubbleSort: function (nums) {\r\n    let numActions = [];\r\n    let numbers = [...nums];\r\n    let swapped = true;\r\n    while (swapped) {\r\n      swapped = false;\r\n      for (let i = 0; i < numbers.length - 1; i++) {\r\n        let numAction = { indices: [i, i + 1], swap: false };\r\n        let num1 = numbers[i];\r\n        let num2 = numbers[i + 1];\r\n        if (num1 > num2) {\r\n          numbers[i] = num2;\r\n          numbers[i + 1] = num1;\r\n          swapped = true;\r\n          numAction.swap = true;\r\n        }\r\n        numActions.push(numAction);\r\n      }\r\n    }\r\n    return numActions;\r\n  },\r\n  insertionSort: function (nums) {\r\n    let numActions = [];\r\n    let numbers = [...nums];\r\n    let curIdx = 1;\r\n    while (curIdx < numbers.length) {\r\n      for (let targetIdx = 0; targetIdx < curIdx; targetIdx++) {\r\n        let numAction = { indices: [curIdx, targetIdx], swap: false };\r\n        let curNumber = numbers[curIdx];\r\n        if (curNumber < numbers[targetIdx]) {\r\n          for (let idx = curIdx; idx > targetIdx; idx--) {\r\n            numbers[idx] = numbers[idx - 1];\r\n            numActions.push({ indices: [idx, idx - 1], swap: true });\r\n          }\r\n          numbers[targetIdx] = curNumber;\r\n          break;\r\n        } else {\r\n          numActions.push(numAction);\r\n        }\r\n      }\r\n      curIdx++;\r\n    }\r\n    return numActions;\r\n  },\r\n};\r\n\r\nexport default sortingAlgos;\r\n//toggleFunc(idx, \"#ECD13A\");\r\n","import { useState, useEffect } from \"react\";\r\nimport \"./css/Numbers.css\";\r\nimport sortingAlgos from \"./sortingAlgos\";\r\n\r\nfunction Numbers() {\r\n  const [numbers, setNumbers] = useState([]);\r\n  const [numbersTotal, setNumbersTotal] = useState(200);\r\n  const [sortingAlgo, setSortingAlgo] = useState(\" \");\r\n  const [animeSpeed, setAnimeSpeed] = useState(50);\r\n  const [animeProgressID, setAnimeProgressID] = useState(null);\r\n\r\n  // color codes\r\n  const colorOrange = \"rgb(247, 116, 45)\";\r\n  const colorBlue = \"rgb(49, 109, 165)\";\r\n  const colorGrey = \"rgb(224, 224, 224)\";\r\n  const colorViolet = \"rgb(220, 58, 252)\";\r\n\r\n  // function for resetting numbers\r\n  const resetNumbers = () => {\r\n    if (animeProgressID !== null) {\r\n      clearInterval(animeProgressID);\r\n      for (let i = 0; i < numbersTotal; i++) {\r\n        let barStyle = document.getElementById(`number${i}`).style;\r\n        if (barStyle.backgroundColor === colorBlue) {\r\n          continue;\r\n        }\r\n        barStyle.backgroundColor = colorBlue;\r\n      }\r\n    }\r\n    document.getElementById(\"button-start\").disabled = true;\r\n\r\n    let newNumbers = [];\r\n    for (let i = 0; i < numbersTotal; i++) {\r\n      let newNumber = Math.floor(Math.random() * 795 + 5);\r\n      newNumbers.push(newNumber);\r\n    }\r\n    setNumbers(newNumbers);\r\n  };\r\n\r\n  // function for changing number bar color\r\n  const setBarColor = (idx, color) => {\r\n    document.getElementById(`number${idx}`).style.backgroundColor = color;\r\n  };\r\n\r\n  // function for changing number bar height\r\n  const setBarHeight = (idx, height) => {\r\n    let barStyle = document.getElementById(`number${idx}`).style;\r\n    barStyle.height = `${height}px`;\r\n    barStyle.borderTopWidth = `${900 - height}px`;\r\n  };\r\n\r\n  // function for visualizing bubble sort\r\n  const sortingAnime = (nums, algo) => {\r\n    let actions = sortingAlgos[algo](nums);\r\n    let lastAction = actions[0];\r\n    let intervalID = setInterval(() => {\r\n      let action = actions.shift();\r\n      if (action === undefined) {\r\n        clearInterval(animeProgressID);\r\n      }\r\n      for (let idx of lastAction.indices) {\r\n        setBarColor(idx, colorBlue);\r\n      }\r\n      let indices = action.indices;\r\n      for (let idx of indices) {\r\n        setBarColor(idx, colorOrange);\r\n      }\r\n      if (action.swap) {\r\n        let height1 = numbers[indices[0]];\r\n        let height2 = numbers[indices[1]];\r\n        setBarHeight(indices[0], height2);\r\n        setBarHeight(indices[1], height1);\r\n        numbers[indices[0]] = height2;\r\n        numbers[indices[1]] = height1;\r\n      }\r\n      lastAction = action;\r\n    }, animeSpeed);\r\n    setAnimeProgressID(intervalID);\r\n    document.getElementById(\"button-start\").disabled = true;\r\n  };\r\n\r\n  // reset numbers at start up\r\n  useEffect(() => {\r\n    resetNumbers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(sortingAlgo);\r\n  }, [sortingAlgo]);\r\n\r\n  return (\r\n    <div id=\"visualizer-container\">\r\n      <div id=\"numbers-container\">\r\n        {numbers.map((number, idx) => (\r\n          <span\r\n            className=\"number-bar\"\r\n            id={`number${idx}`}\r\n            key={idx}\r\n            style={{\r\n              height: `${number}px`,\r\n              borderTop: `${900 - number}px solid ${colorGrey}`,\r\n            }}\r\n          ></span>\r\n        ))}\r\n      </div>\r\n      <div id=\"buttons-container\">\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-refresh\"\r\n          style={{\r\n            width: \"50px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={resetNumbers}\r\n        >\r\n          Refresh\r\n        </button>\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-bubbleSort\"\r\n          style={{\r\n            width: \"100px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            setSortingAlgo(\"bubbleSort\");\r\n            document.getElementById(\"button-start\").disabled = false;\r\n          }}\r\n        >\r\n          Bubble Sort\r\n        </button>\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-insertionSort\"\r\n          style={{\r\n            width: \"100px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            setSortingAlgo(\"insertionSort\");\r\n            document.getElementById(\"button-start\").disabled = false;\r\n          }}\r\n        >\r\n          Insertion Sort\r\n        </button>\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-start\"\r\n          style={{\r\n            width: \"50px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            sortingAnime(numbers, sortingAlgo);\r\n          }}\r\n        >\r\n          Start\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Numbers;\r\n","import Numbers from \"./Numbers\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Numbers />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}