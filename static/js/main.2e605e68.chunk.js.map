{"version":3,"sources":["sortingAlgos.js","Numbers.js","App.js","index.js"],"names":["sortingAlgos","bubbleSort","nums","numActions","numbers","swapped","i","length","numAction","swapIndices","swap","num1","num2","push","numsSorted","selectionSort","curIdx","curNumber","minIdx","minNumber","idx","numBarsToggle","toggleIndices","insertionSort","targetIdx","mergeSort","range","numsTotal","actions","set","setIndices","setHeights","reverse","medianIdx","Math","floor","this","slice","numsSortedLeft","actionsLeft","numsSortedRight","actionsRight","concat","numLeftIdx","numRightIdx","numLeft","numRight","Numbers","useState","setNumbers","numbersTotal","sortingAlgo","setSortingAlgo","animeSpeed","animeProgressID","colorOrange","colorBlue","numBars","setBarColor","color","document","getElementById","style","backgroundColor","toggleBarColor","targetColor","setBarHeight","height","barStyle","borderTopWidth","resetNumbers","returnNumbers","clearInterval","disabled","newNumbers","newNumber","random","buttons","disableAlgoButtons","sortNumbers","sortingAlgoNames","disable","forEach","algoName","useEffect","Fragment","className","map","number","id","borderTop","onClick","algo","lastAction","setInterval","action","shift","undefined","indices","height1","height2","heights","sortingAnime","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.2e605e68.chunk.js","sourcesContent":["const sortingAlgos = {\r\n  bubbleSort: function (nums) {\r\n    let numActions = [];\r\n    let numbers = [...nums];\r\n    let swapped = true;\r\n\r\n    while (swapped) {\r\n      swapped = false;\r\n      for (let i = 0; i < numbers.length - 1; i++) {\r\n        let numAction = { swapIndices: [i, i + 1], swap: false };\r\n        let num1 = numbers[i];\r\n        let num2 = numbers[i + 1];\r\n        if (num1 > num2) {\r\n          numbers[i] = num2;\r\n          numbers[i + 1] = num1;\r\n          swapped = true;\r\n          numAction.swap = true;\r\n        }\r\n        numActions.push(numAction);\r\n      }\r\n    }\r\n\r\n    return { numsSorted: numbers, numActions };\r\n  },\r\n\r\n  selectionSort: function (nums) {\r\n    let numActions = [];\r\n    let numbers = [...nums];\r\n\r\n    for (let curIdx = 0; curIdx < numbers.length - 1; curIdx++) {\r\n      let curNumber = numbers[curIdx];\r\n      let minIdx = curIdx;\r\n      let minNumber = curNumber;\r\n      for (let idx = curIdx + 1; idx < numbers.length; idx++) {\r\n        numActions.push({ swapIndices: [curIdx, idx], swap: false });\r\n        if (numbers[idx] < minNumber) {\r\n          if (minIdx !== curIdx) {\r\n            numActions.push({\r\n              swapIndices: [curIdx],\r\n              swap: false,\r\n              numBarsToggle: true,\r\n              toggleIndices: [minIdx],\r\n            });\r\n          }\r\n          numActions.push({\r\n            swapIndices: [curIdx],\r\n            swap: false,\r\n            numBarsToggle: true,\r\n            toggleIndices: [idx],\r\n          });\r\n          minIdx = idx;\r\n          minNumber = numbers[idx];\r\n        }\r\n      }\r\n      if (minIdx !== curIdx) {\r\n        numbers[curIdx] = numbers[minIdx];\r\n        numbers[minIdx] = curNumber;\r\n        numActions.push({ swapIndices: [curIdx, minIdx], swap: true });\r\n      }\r\n    }\r\n\r\n    return { numsSorted: numbers, numActions };\r\n  },\r\n\r\n  insertionSort: function (nums) {\r\n    let numActions = [];\r\n    let numbers = [...nums];\r\n\r\n    for (let curIdx = 1; curIdx < numbers.length; curIdx++) {\r\n      for (let targetIdx = 0; targetIdx < curIdx; targetIdx++) {\r\n        let curNumber = numbers[curIdx];\r\n        if (curNumber < numbers[targetIdx]) {\r\n          numActions.push({\r\n            toggleIndices: [targetIdx],\r\n            numBarsToggle: true,\r\n          });\r\n          for (let idx = curIdx; idx > targetIdx; idx--) {\r\n            numbers[idx] = numbers[idx - 1];\r\n            numActions.push({ swapIndices: [idx, idx - 1], swap: true });\r\n          }\r\n          numbers[targetIdx] = curNumber;\r\n          break;\r\n        } else {\r\n          numActions.push({ swapIndices: [curIdx, targetIdx], swap: false });\r\n        }\r\n      }\r\n    }\r\n\r\n    return { numsSorted: numbers, numActions };\r\n  },\r\n\r\n  mergeSort: function (\r\n    numbers,\r\n    range = [0, numbers.length - 1],\r\n    numActions = []\r\n  ) {\r\n    let numsTotal = numbers.length;\r\n    let actions = [];\r\n\r\n    // base cases\r\n    if (numsTotal === 1) {\r\n      actions.push({ set: true, setIndices: [range[0]], setHeights: numbers });\r\n      return { numsSorted: numbers, range: [range[0]], numActions: [] };\r\n    }\r\n    if (numsTotal === 2) {\r\n      if (numbers[0] > numbers[1]) {\r\n        numbers = numbers.reverse();\r\n      }\r\n      for (let idx = 0; idx < numsTotal; idx++) {\r\n        actions.push({\r\n          set: true,\r\n          setIndices: [range[0] + idx],\r\n          setHeights: [numbers[idx]],\r\n        });\r\n      }\r\n      return { numsSorted: numbers, range, numActions: actions };\r\n    }\r\n\r\n    // recursively call mergeSort on left and right subarray\r\n    let medianIdx = Math.floor(numsTotal / 2);\r\n    let {\r\n      numsSorted: numsSortedLeft,\r\n      numActions: actionsLeft,\r\n    } = this.mergeSort(numbers.slice(0, medianIdx), [\r\n      range[0],\r\n      range[0] + medianIdx - 1,\r\n    ]);\r\n    let {\r\n      numsSorted: numsSortedRight,\r\n      numActions: actionsRight,\r\n    } = this.mergeSort(numbers.slice(medianIdx), [\r\n      range[0] + medianIdx,\r\n      range[1],\r\n    ]);\r\n    // store sorting actions returned by mergeSort on subarrays\r\n    numActions = numActions.concat([...actionsLeft, ...actionsRight]);\r\n\r\n    // merge left and right sorted subarray to a single array\r\n    let numLeftIdx = 0;\r\n    let numRightIdx = 0;\r\n    let numsSorted = [];\r\n    // put numbers from two subarrays into one array\r\n    while (\r\n      numLeftIdx < numsSortedLeft.length &&\r\n      numRightIdx < numsSortedRight.length\r\n    ) {\r\n      let numLeft = numsSortedLeft[numLeftIdx];\r\n      let numRight = numsSortedRight[numRightIdx];\r\n      if (numLeft < numRight) {\r\n        numsSorted.push(numLeft);\r\n        numLeftIdx++;\r\n      } else {\r\n        numsSorted.push(numRight);\r\n        numRightIdx++;\r\n      }\r\n    }\r\n    if (numLeftIdx < numsSortedLeft.length) {\r\n      for (let idx = numLeftIdx; idx < numsSortedLeft.length; idx++) {\r\n        numsSorted.push(numsSortedLeft[idx]);\r\n      }\r\n    } else {\r\n      for (let idx = numRightIdx; idx < numsSortedRight.length; idx++) {\r\n        numsSorted.push(numsSortedRight[idx]);\r\n      }\r\n    }\r\n    // return sorting actions for animation\r\n    for (let idx = 0; idx < numsSorted.length; idx++) {\r\n      numActions.push({\r\n        set: true,\r\n        setIndices: [range[0] + idx],\r\n        setHeights: [numsSorted[idx]],\r\n      });\r\n    }\r\n\r\n    return { numsSorted, range, numActions };\r\n  },\r\n};\r\n\r\nexport default sortingAlgos;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./css/Numbers.css\";\r\nimport sortingAlgos from \"./sortingAlgos\";\r\n\r\nfunction Numbers() {\r\n  // state values\r\n  const [numbers, setNumbers] = useState([]);\r\n  const [numbersTotal, setNumbersTotal] = useState(200);\r\n  const [sortingAlgo, setSortingAlgo] = useState(\" \");\r\n  const [animeSpeed, setAnimeSpeed] = useState(30);\r\n  let animeProgressID = null;\r\n\r\n  // color codes\r\n  const colorOrange = \"rgb(247, 116, 45)\";\r\n  const colorBlue = \"rgb(49, 109, 165)\";\r\n  const colorGrey = \"rgb(224, 224, 224)\";\r\n  const colorViolet = \"rgb(220, 58, 252)\";\r\n\r\n  // design related constants\r\n  const NUMBER_MAX = 690;\r\n  const NUMBER_MIN = 10;\r\n  const CANVAS_HEIGHT = 700;\r\n\r\n  const numBars = {\r\n    // method for changing number bar color\r\n    setBarColor: function (idx, color) {\r\n      document.getElementById(`number${idx}`).style.backgroundColor = color;\r\n    },\r\n    // method for toggling number bar between blue and target color\r\n    toggleBarColor: function (idx, targetColor) {\r\n      if (\r\n        document.getElementById(`number${idx}`).style.backgroundColor !==\r\n        colorBlue\r\n      ) {\r\n        this.setBarColor(idx, colorBlue);\r\n      } else {\r\n        this.setBarColor(idx, targetColor);\r\n      }\r\n    }, // method for changing number bar height\r\n    setBarHeight: function (idx, height) {\r\n      let barStyle = document.getElementById(`number${idx}`).style;\r\n      barStyle.height = `${height}px`;\r\n      barStyle.borderTopWidth = `${CANVAS_HEIGHT - height}px`;\r\n    },\r\n    // function for resetting numbers\r\n    resetNumbers: function (returnNumbers = false) {\r\n      if (animeProgressID !== null) {\r\n        clearInterval(animeProgressID);\r\n        animeProgressID = null;\r\n        for (let i = 0; i < numbersTotal; i++) {\r\n          let barStyle = document.getElementById(`number${i}`).style;\r\n          if (barStyle.backgroundColor === colorBlue) {\r\n            continue;\r\n          }\r\n          barStyle.backgroundColor = colorBlue;\r\n        }\r\n      }\r\n      document.getElementById(\"button-start\").disabled = true;\r\n\r\n      let newNumbers = [];\r\n      for (let i = 0; i < numbersTotal; i++) {\r\n        let newNumber = Math.floor(Math.random() * 680 + 10);\r\n        newNumbers.push(newNumber);\r\n      }\r\n      setNumbers(newNumbers);\r\n      buttons.disableAlgoButtons(false);\r\n      setSortingAlgo(\"\");\r\n\r\n      if (returnNumbers) return newNumbers;\r\n    },\r\n    sortNumbers: function (nums) {\r\n      let { numsSorted } = sortingAlgos.mergeSort(nums);\r\n      setNumbers(numsSorted);\r\n    },\r\n  };\r\n\r\n  // function for visualizing bubble sort\r\n  const sortingAnime = (nums, algo) => {\r\n    let { numActions: actions } = sortingAlgos[algo](nums);\r\n    let lastAction = actions[0];\r\n    animeProgressID = setInterval(() => {\r\n      let action = actions.shift();\r\n      //console.log(action); //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!debug\r\n      if (lastAction.swap !== undefined) {\r\n        for (let idx of lastAction.swapIndices) {\r\n          numBars.setBarColor(idx, colorBlue);\r\n        }\r\n      } else if (lastAction.set !== undefined) {\r\n        for (let idx of lastAction.setIndices) {\r\n          numBars.setBarColor(idx, colorBlue);\r\n        }\r\n      }\r\n      if (action === undefined) {\r\n        clearInterval(animeProgressID);\r\n        animeProgressID = null;\r\n        buttons.disableAlgoButtons(false);\r\n        return;\r\n      }\r\n\r\n      // swap numbers if requested\r\n      if (action.swap !== undefined) {\r\n        let indices = action.swapIndices;\r\n        for (let idx of indices) {\r\n          numBars.setBarColor(idx, colorOrange);\r\n        }\r\n        if (action.swap) {\r\n          let height1 = numbers[indices[0]];\r\n          let height2 = numbers[indices[1]];\r\n          numBars.setBarHeight(indices[0], height2);\r\n          numBars.setBarHeight(indices[1], height1);\r\n          numbers[indices[0]] = height2;\r\n          numbers[indices[1]] = height1;\r\n        }\r\n      }\r\n      // set target numbers if requested\r\n      if (action.set !== undefined) {\r\n        let indices = action.setIndices;\r\n        let heights = action.setHeights;\r\n        for (let idx = 0; idx < indices.length; idx++) {\r\n          numBars.setBarHeight(indices[idx], heights[idx]);\r\n          numBars.setBarColor(indices[idx], colorOrange);\r\n          numbers[indices[idx]] = heights[idx];\r\n        }\r\n      }\r\n      // highlight target numbers if requested\r\n      if (action.numBarsToggle !== undefined) {\r\n        let indices = action.toggleIndices;\r\n        for (let idx of indices) {\r\n          numBars.toggleBarColor(idx, colorViolet);\r\n        }\r\n      }\r\n      lastAction = action;\r\n    }, animeSpeed);\r\n    document.getElementById(\"button-start\").disabled = true;\r\n  };\r\n\r\n  const buttons = {\r\n    sortingAlgoNames: [\r\n      \"bubbleSort\",\r\n      \"insertionSort\",\r\n      \"selectionSort\",\r\n      \"mergeSort\",\r\n    ],\r\n    disableAlgoButtons: function (disable) {\r\n      this.sortingAlgoNames.forEach((algoName) => {\r\n        document.getElementById(`button-${algoName}`).disabled = disable;\r\n      });\r\n    },\r\n  };\r\n\r\n  // reset numbers at start up\r\n  useEffect(() => {\r\n    numBars.resetNumbers();\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"title-container\"></div>\r\n      <div className=\"numbers-container\">\r\n        {numbers.map((number, idx) => (\r\n          <span\r\n            className=\"number-bar\"\r\n            id={`number${idx}`}\r\n            key={idx}\r\n            style={{\r\n              height: `${number}px`,\r\n              borderTop: `${CANVAS_HEIGHT - number}px solid ${colorGrey}`,\r\n            }}\r\n          ></span>\r\n        ))}\r\n      </div>\r\n      <div className=\"buttons-container\">\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-sortedRefresh\"\r\n          onClick={() => {\r\n            numBars.sortNumbers(numBars.resetNumbers(true));\r\n          }}\r\n        >\r\n          Sorted Refresh\r\n        </button>\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-refresh\"\r\n          onClick={numBars.resetNumbers}\r\n        >\r\n          Refresh\r\n        </button>\r\n        {buttons.sortingAlgoNames.map((algoName, idx) => (\r\n          <button\r\n            className=\"button-algo\"\r\n            id={`button-${algoName}`}\r\n            key={idx}\r\n            onClick={() => {\r\n              setSortingAlgo(algoName);\r\n              document.getElementById(\"button-start\").disabled = false;\r\n            }}\r\n          >\r\n            {algoName}\r\n          </button>\r\n        ))}\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-start\"\r\n          onClick={() => {\r\n            buttons.disableAlgoButtons(true);\r\n            sortingAnime(numbers, sortingAlgo);\r\n          }}\r\n        >\r\n          Start\r\n        </button>\r\n      </div>\r\n      <div className=\"messages-container\">\r\n        <p id=\"message-algo\">Pick an algorithm: {sortingAlgo}</p>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Numbers;\r\n","import Numbers from \"./Numbers\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Numbers />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}