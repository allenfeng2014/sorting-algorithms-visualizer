{"version":3,"sources":["sortingAlgos.js","Numbers.js","App.js","index.js"],"names":["sortingAlgos","bubbleSort","numbers","numActions","nums","swapped","i","length","numAction","swap","swapIndices","num1","num2","push","numsSorted","selectionSort","curIdx","curNumber","minIdx","minNumber","idx","toggle","toggleIndices","insertionSort","targetIdx","mergeSort","range","numsTotal","actions","set","setIndices","setHeights","reverse","middleIdx","Math","floor","this","slice","numsSortedLeft","actionsLeft","numsSortedRight","actionsRight","concat","numLeftIdx","numRightIdx","numLeft","numRight","quickSort","pivotIdx","pivotNum","obj","Numbers","useState","setNumbers","numbersTotal","setNumbersTotal","sortingAlgo","setSortingAlgo","animeSpeed","setAnimeSpeed","animeProgressID","colorOrange","colorBlue","numBars","setBarColor","color","document","getElementById","style","backgroundColor","toggleBarColor","targetColor","setBarHeight","height","barStyle","borderTopWidth","NUMBER_MAX","resetNumbers","returnNumbers","clearInterval","disabled","newNumbers","newNumber","random","buttons","disableAlgoButtons","sortNumbers","sortingAlgoNames","disable","forEach","algoName","useEffect","Fragment","className","map","number","id","borderTop","onClick","algo","lastAction","setInterval","action","shift","undefined","indices","height1","height2","heights","sortingAnime","placeholder","value","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.1bef272f.chunk.js","sourcesContent":["/*\r\nsorting algorithms included:\r\n  bubbleSort, selectionSort, insertionSort,\r\n  mergeSort, quickSort, !!!!!radixSort\r\n\r\nparameters:\r\n  numbers: array of unsorted numbers\r\n  range: range of current subarray (for recursive algos)\r\n        format [startIdx, endIdx]\r\n  numActions: swap/toggle/set actions on numbers for animation\r\n            format {\r\n              swap: bool,\r\n              swapIndices: [],\r\n              toggle: bool,\r\n              toggleIndices: [],\r\n              set: bool,\r\n              setIndices: [],\r\n              setHeights: []\r\n            }\r\n*/\r\nconst sortingAlgos = {\r\n  bubbleSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n    let swapped = true;\r\n\r\n    while (swapped) {\r\n      swapped = false;\r\n      for (let i = 0; i < nums.length - 1; i++) {\r\n        let numAction = { swap: false, swapIndices: [i, i + 1] };\r\n        let num1 = nums[i];\r\n        let num2 = nums[i + 1];\r\n        if (num1 > num2) {\r\n          nums[i] = num2;\r\n          nums[i + 1] = num1;\r\n          swapped = true;\r\n          numAction.swap = true;\r\n        }\r\n        numActions.push(numAction);\r\n      }\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  selectionSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n\r\n    for (let curIdx = 0; curIdx < nums.length - 1; curIdx++) {\r\n      let curNumber = nums[curIdx];\r\n      let minIdx = curIdx;\r\n      let minNumber = curNumber;\r\n      for (let idx = curIdx + 1; idx < nums.length; idx++) {\r\n        numActions.push({ swap: false, swapIndices: [curIdx, idx] });\r\n        if (nums[idx] < minNumber) {\r\n          if (minIdx !== curIdx) {\r\n            numActions.push({\r\n              swap: false,\r\n              swapIndices: [curIdx],\r\n              toggle: true,\r\n              toggleIndices: [minIdx],\r\n            });\r\n          }\r\n          numActions.push({\r\n            swap: false,\r\n            swapIndices: [curIdx],\r\n            toggle: true,\r\n            toggleIndices: [idx],\r\n          });\r\n          minIdx = idx;\r\n          minNumber = nums[idx];\r\n        }\r\n      }\r\n      if (minIdx !== curIdx) {\r\n        nums[curIdx] = nums[minIdx];\r\n        nums[minIdx] = curNumber;\r\n        numActions.push({ swap: true, swapIndices: [curIdx, minIdx] });\r\n      }\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  insertionSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n\r\n    for (let curIdx = 1; curIdx < nums.length; curIdx++) {\r\n      for (let targetIdx = 0; targetIdx < curIdx; targetIdx++) {\r\n        let curNumber = nums[curIdx];\r\n        if (curNumber < nums[targetIdx]) {\r\n          numActions.push({\r\n            toggle: true,\r\n            toggleIndices: [targetIdx],\r\n          });\r\n          for (let idx = curIdx; idx > targetIdx; idx--) {\r\n            nums[idx] = nums[idx - 1];\r\n            numActions.push({ swap: true, swapIndices: [idx, idx - 1] });\r\n          }\r\n          nums[targetIdx] = curNumber;\r\n          break;\r\n        } else {\r\n          numActions.push({ swap: false, swapIndices: [curIdx, targetIdx] });\r\n        }\r\n      }\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  mergeSort: function (nums, range = [0, nums.length - 1], numActions = []) {\r\n    let numsTotal = nums.length;\r\n    let actions = [];\r\n\r\n    // base cases\r\n    if (numsTotal === 1) {\r\n      actions.push({ set: true, setIndices: [range[0]], setHeights: [nums] });\r\n      return { numsSorted: nums, range: [range[0]], numActions: [] };\r\n    }\r\n    if (numsTotal === 2) {\r\n      if (nums[0] > nums[1]) {\r\n        nums = nums.reverse();\r\n      }\r\n      for (let idx = 0; idx < numsTotal; idx++) {\r\n        actions.push({\r\n          set: true,\r\n          setIndices: [range[0] + idx],\r\n          setHeights: [nums[idx]],\r\n        });\r\n      }\r\n      return { numsSorted: nums, range, numActions: actions };\r\n    }\r\n\r\n    // recursively call mergeSort on left and right subarray\r\n    let middleIdx = Math.floor(numsTotal / 2);\r\n    let {\r\n      numsSorted: numsSortedLeft,\r\n      numActions: actionsLeft,\r\n    } = this.mergeSort(nums.slice(0, middleIdx), [\r\n      range[0],\r\n      range[0] + middleIdx - 1,\r\n    ]);\r\n    let {\r\n      numsSorted: numsSortedRight,\r\n      numActions: actionsRight,\r\n    } = this.mergeSort(nums.slice(middleIdx), [range[0] + middleIdx, range[1]]);\r\n    // store sorting actions returned by mergeSort on subarrays\r\n    numActions = numActions.concat([...actionsLeft, ...actionsRight]);\r\n\r\n    // merge left and right sorted subarray to a single array\r\n    let numLeftIdx = 0;\r\n    let numRightIdx = 0;\r\n    let numsSorted = [];\r\n    // put nums from two subarrays into one array\r\n    while (\r\n      numLeftIdx < numsSortedLeft.length &&\r\n      numRightIdx < numsSortedRight.length\r\n    ) {\r\n      let numLeft = numsSortedLeft[numLeftIdx];\r\n      let numRight = numsSortedRight[numRightIdx];\r\n      if (numLeft < numRight) {\r\n        numsSorted.push(numLeft);\r\n        numLeftIdx++;\r\n      } else {\r\n        numsSorted.push(numRight);\r\n        numRightIdx++;\r\n      }\r\n    }\r\n    if (numLeftIdx < numsSortedLeft.length) {\r\n      for (let idx = numLeftIdx; idx < numsSortedLeft.length; idx++) {\r\n        numsSorted.push(numsSortedLeft[idx]);\r\n      }\r\n    } else {\r\n      for (let idx = numRightIdx; idx < numsSortedRight.length; idx++) {\r\n        numsSorted.push(numsSortedRight[idx]);\r\n      }\r\n    }\r\n    // return sorting actions for animation\r\n    for (let idx = 0; idx < numsSorted.length; idx++) {\r\n      numActions.push({\r\n        set: true,\r\n        setIndices: [range[0] + idx],\r\n        setHeights: [numsSorted[idx]],\r\n      });\r\n    }\r\n\r\n    return { numsSorted, range, numActions };\r\n  },\r\n\r\n  quickSort: function (nums, range = [0, nums.length - 1], numActions = []) {\r\n    nums = [...nums];\r\n    // base cases\r\n    if (nums.length === 2) {\r\n      let numsSorted = [];\r\n      let numAction = {};\r\n      if (nums[0] <= nums[1]) {\r\n        numsSorted = nums;\r\n        numAction = { swap: false, swapIndices: [range[0], range[1]] };\r\n      } else {\r\n        numsSorted = nums.reverse();\r\n        numAction = { swap: true, swapIndices: [range[0], range[1]] };\r\n      }\r\n      numActions.push(numAction);\r\n      return { numsSorted, range, numActions };\r\n    }\r\n\r\n    // recursive calls\r\n    let pivotIdx = nums.length - 1;\r\n    numActions.push({ toggle: true, toggleIndices: [range[0] + pivotIdx] });\r\n    let numLeftIdx = 0;\r\n    let numRightIdx = pivotIdx - 1;\r\n    numActions.push({\r\n      swap: false,\r\n      swapIndices: [range[0] + numLeftIdx, range[0] + numRightIdx],\r\n    });\r\n\r\n    while (numLeftIdx < numRightIdx) {\r\n      let numAction = {\r\n        swap: false,\r\n        swapIndices: [range[0] + numLeftIdx, range[0] + numRightIdx],\r\n      };\r\n      // find a number on the left that > pivot number\r\n      if (nums[numLeftIdx] <= nums[pivotIdx]) {\r\n        numLeftIdx++;\r\n        numAction.swapIndices[0]++;\r\n      }\r\n      // fing a number on the right that < pivot number\r\n      else if (nums[numRightIdx] >= nums[pivotIdx]) {\r\n        numRightIdx--;\r\n        numAction.swapIndices[1]--;\r\n      }\r\n      // swap these two numbers so that newLeft < pivotNum < newRight\r\n      else {\r\n        nums[numLeftIdx] = nums[numLeftIdx] ^ nums[numRightIdx];\r\n        nums[numRightIdx] = nums[numLeftIdx] ^ nums[numRightIdx];\r\n        nums[numLeftIdx] = nums[numLeftIdx] ^ nums[numRightIdx];\r\n        numAction.swap = true;\r\n      }\r\n      numActions.push(numAction);\r\n    }\r\n    // check the number at idx = numLeftIdx = numRightIdx\r\n    let pivotNum = nums[pivotIdx];\r\n    if (nums[numLeftIdx] <= pivotNum) {\r\n      pivotIdx = numLeftIdx + 1;\r\n    } else {\r\n      pivotIdx = numLeftIdx;\r\n    }\r\n    // move pivot number to its correct position so that lefts < pivot < rights\r\n    for (let idx = nums.length - 1; idx > pivotIdx; idx--) {\r\n      nums[idx] = nums[idx - 1];\r\n      numActions.push({\r\n        swap: false,\r\n        swapIndices: [range[0] + idx - 1, range[0] + idx],\r\n        set: true,\r\n        setIndices: [range[0] + idx],\r\n        setHeights: [nums[idx - 1]],\r\n      });\r\n    }\r\n    nums[pivotIdx] = pivotNum;\r\n    numActions.push({\r\n      toggle: true,\r\n      toggleIndices: [range[0] + pivotIdx],\r\n      set: true,\r\n      setIndices: [range[0] + pivotIdx],\r\n      setHeights: [pivotNum],\r\n    });\r\n\r\n    let numsSortedLeft = nums.slice(0, pivotIdx);\r\n    let actionsLeft = [];\r\n    if (pivotIdx > 1) {\r\n      let obj = this.quickSort(\r\n        numsSortedLeft,\r\n        [range[0], range[0] + pivotIdx - 1],\r\n        numActions\r\n      );\r\n      numsSortedLeft = obj.numsSorted;\r\n      numActions = obj.numActions;\r\n    }\r\n    let numsSortedRight = nums.slice(pivotIdx + 1, nums.length);\r\n    let actionsRight = [];\r\n    if (pivotIdx < nums.length - 2) {\r\n      let obj = this.quickSort(\r\n        numsSortedRight,\r\n        [range[0] + pivotIdx + 1, range[1]],\r\n        numActions\r\n      );\r\n      numsSortedRight = obj.numsSorted;\r\n      numActions = obj.numActions;\r\n    }\r\n    nums = [...numsSortedLeft, pivotNum, ...numsSortedRight];\r\n\r\n    return {\r\n      numsSorted: nums,\r\n      range,\r\n      numActions,\r\n    };\r\n  },\r\n};\r\n\r\nexport default sortingAlgos;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./css/Numbers.css\";\r\nimport sortingAlgos from \"./sortingAlgos\";\r\n\r\nfunction Numbers() {\r\n  // state values\r\n  const [numbers, setNumbers] = useState([]);\r\n  const [numbersTotal, setNumbersTotal] = useState(200);\r\n  const [sortingAlgo, setSortingAlgo] = useState(\" \");\r\n  const [animeSpeed, setAnimeSpeed] = useState(30);\r\n  let animeProgressID = null;\r\n\r\n  // color codes\r\n  const colorOrange = \"rgb(247, 116, 45)\";\r\n  const colorBlue = \"rgb(49, 109, 165)\";\r\n  const colorGrey = \"rgb(224, 224, 224)\";\r\n  const colorViolet = \"rgb(220, 58, 252)\";\r\n\r\n  // design related constants\r\n  const NUMBER_MAX = 690;\r\n  const NUMBER_MIN = 10;\r\n  const CANVAS_HEIGHT = NUMBER_MAX + NUMBER_MIN;\r\n\r\n  const numBars = {\r\n    // method for changing number bar color\r\n    setBarColor: function (idx, color) {\r\n      document.getElementById(`number${idx}`).style.backgroundColor = color;\r\n    },\r\n    // method for toggling number bar between blue and target color\r\n    toggleBarColor: function (idx, targetColor) {\r\n      if (\r\n        document.getElementById(`number${idx}`).style.backgroundColor !==\r\n        colorBlue\r\n      ) {\r\n        this.setBarColor(idx, colorBlue);\r\n      } else {\r\n        this.setBarColor(idx, targetColor);\r\n      }\r\n    },\r\n    // method for changing number bar height\r\n    setBarHeight: function (idx, height) {\r\n      let barStyle = document.getElementById(`number${idx}`).style;\r\n      barStyle.height = `${height}px`;\r\n      barStyle.borderTopWidth = `${CANVAS_HEIGHT - height}px`;\r\n    },\r\n    // function for resetting numbers\r\n    resetNumbers: function (returnNumbers = false) {\r\n      if (animeProgressID !== null) {\r\n        clearInterval(animeProgressID);\r\n        animeProgressID = null;\r\n        for (let i = 0; i < numbersTotal; i++) {\r\n          let barStyle = document.getElementById(`number${i}`).style;\r\n          if (barStyle.backgroundColor === colorBlue) {\r\n            continue;\r\n          }\r\n          barStyle.backgroundColor = colorBlue;\r\n        }\r\n      }\r\n      document.getElementById(\"button-start\").disabled = true;\r\n\r\n      let newNumbers = [];\r\n      for (let i = 0; i < numbersTotal; i++) {\r\n        let newNumber = Math.floor(Math.random() * 680 + 10);\r\n        newNumbers.push(newNumber);\r\n      }\r\n      setNumbers(newNumbers);\r\n      buttons.disableAlgoButtons(false);\r\n      setSortingAlgo(\"\");\r\n\r\n      if (returnNumbers) return newNumbers;\r\n    },\r\n    sortNumbers: function (nums) {\r\n      let { numsSorted } = sortingAlgos.mergeSort(nums);\r\n      setNumbers(numsSorted);\r\n    },\r\n  };\r\n\r\n  // function for visualizing bubble sort\r\n  const sortingAnime = (nums, algo) => {\r\n    let { numActions: actions } = sortingAlgos[algo](nums);\r\n    let lastAction = actions[0];\r\n    animeProgressID = setInterval(() => {\r\n      let action = actions.shift();\r\n      //console.log(action); //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!debug\r\n      if (lastAction.swap !== undefined) {\r\n        for (let idx of lastAction.swapIndices) {\r\n          numBars.setBarColor(idx, colorBlue);\r\n        }\r\n      } else if (lastAction.set !== undefined) {\r\n        for (let idx of lastAction.setIndices) {\r\n          numBars.setBarColor(idx, colorBlue);\r\n        }\r\n      }\r\n      if (action === undefined) {\r\n        clearInterval(animeProgressID);\r\n        animeProgressID = null;\r\n        buttons.disableAlgoButtons(false);\r\n        return;\r\n      }\r\n\r\n      // swap numbers if requested\r\n      if (action.swap !== undefined) {\r\n        let indices = action.swapIndices;\r\n        for (let idx of indices) {\r\n          numBars.setBarColor(idx, colorOrange);\r\n        }\r\n        if (action.swap) {\r\n          //console.log(\"swapping \", indices[0], indices[1]);///////debug\r\n          let height1 = numbers[indices[0]];\r\n          let height2 = numbers[indices[1]];\r\n          numBars.setBarHeight(indices[0], height2);\r\n          numBars.setBarHeight(indices[1], height1);\r\n          numbers[indices[0]] = height2;\r\n          numbers[indices[1]] = height1;\r\n        }\r\n      }\r\n      // set target numbers if requested\r\n      if (action.set !== undefined) {\r\n        let indices = action.setIndices;\r\n        let heights = action.setHeights;\r\n        for (let idx = 0; idx < indices.length; idx++) {\r\n          numBars.setBarHeight(indices[idx], heights[idx]);\r\n          numBars.setBarColor(indices[idx], colorOrange);\r\n          numbers[indices[idx]] = heights[idx];\r\n        }\r\n      }\r\n      // highlight target numbers if requested\r\n      if (action.toggle !== undefined) {\r\n        let indices = action.toggleIndices;\r\n        for (let idx of indices) {\r\n          numBars.toggleBarColor(idx, colorViolet);\r\n        }\r\n      }\r\n      lastAction = action;\r\n    }, animeSpeed);\r\n    document.getElementById(\"button-start\").disabled = true;\r\n  };\r\n\r\n  const buttons = {\r\n    sortingAlgoNames: [\r\n      \"bubbleSort\",\r\n      \"insertionSort\",\r\n      \"selectionSort\",\r\n      \"mergeSort\",\r\n      \"quickSort\",\r\n    ],\r\n    disableAlgoButtons: function (disable) {\r\n      this.sortingAlgoNames.forEach((algoName) => {\r\n        document.getElementById(`button-${algoName}`).disabled = disable;\r\n      });\r\n    },\r\n  };\r\n\r\n  // reset numbers at start up\r\n  useEffect(() => {\r\n    numBars.resetNumbers();\r\n  }, [numbersTotal]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"title-container\"></div>\r\n      <div className=\"numbers-container\">\r\n        {numbers.map((number, idx) => (\r\n          <span\r\n            className=\"number-bar\"\r\n            id={`number${idx}`}\r\n            key={idx}\r\n            style={{\r\n              height: `${number}px`,\r\n              borderTop: `${CANVAS_HEIGHT - number}px solid ${colorGrey}`,\r\n            }}\r\n          ></span>\r\n        ))}\r\n      </div>\r\n      <div className=\"buttons-container\">\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-sortedRefresh\"\r\n          onClick={() => {\r\n            numBars.sortNumbers(numBars.resetNumbers(true));\r\n          }}\r\n        >\r\n          Sorted Refresh\r\n        </button>\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-refresh\"\r\n          onClick={numBars.resetNumbers}\r\n        >\r\n          Refresh\r\n        </button>\r\n        {buttons.sortingAlgoNames.map((algoName, idx) => (\r\n          <button\r\n            className=\"button-algo\"\r\n            id={`button-${algoName}`}\r\n            key={idx}\r\n            onClick={() => {\r\n              setSortingAlgo(algoName);\r\n              document.getElementById(\"button-start\").disabled = false;\r\n            }}\r\n          >\r\n            {algoName}\r\n          </button>\r\n        ))}\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-start\"\r\n          onClick={() => {\r\n            buttons.disableAlgoButtons(true);\r\n            sortingAnime(numbers, sortingAlgo);\r\n          }}\r\n        >\r\n          Start\r\n        </button>\r\n        <textarea id=\"input-animeSpeed\" placeholder={animeSpeed}></textarea>\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-setSpeed\"\r\n          onClick={() => {\r\n            setAnimeSpeed(document.getElementById(\"input-animeSpeed\").value);\r\n          }}\r\n        >\r\n          SetSpeed\r\n        </button>\r\n        <textarea id=\"input-numbersTotal\" placeholder={numbersTotal}></textarea>\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-setSpeed\"\r\n          onClick={() => {\r\n            setNumbersTotal(\r\n              document.getElementById(\"input-numbersTotal\").value\r\n            );\r\n          }}\r\n        >\r\n          SetNumsTotal\r\n        </button>\r\n      </div>\r\n      <div className=\"messages-container\">\r\n        <p id=\"message-algo\">Pick an algorithm: {sortingAlgo}</p>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Numbers;\r\n","import Numbers from \"./Numbers\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Numbers />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}