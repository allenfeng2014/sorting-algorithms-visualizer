{"version":3,"sources":["sortingAlgos.js","Numbers.js","App.js","index.js"],"names":["sortingAlgos","bubbleSort","numbers","numActions","nums","swapped","i","length","numAction","swap","swapIndices","num1","num2","push","numsSorted","oddEvenSort","prevRunSorted","curRunSorted","startIdx","toggleIndices","idx","toggle","selectionSort","curIdx","curNumber","minIdx","minNumber","insertionSort","targetIdx","cycleSort","curNum","numsLessTotal","console","log","radixSort","divisor","prevDivisor","digits","digit","noMoreDigits","counts","Array","fill","indexOf","newNums","digitIdx","set","setIndices","setHeights","mergeSort","range","numsTotal","actions","reverse","middleIdx","Math","floor","this","slice","numsSortedLeft","actionsLeft","numsSortedRight","actionsRight","concat","numLeftIdx","numRightIdx","numLeft","numRight","quickSort","pivotIdx","pivotNum","obj","Numbers","useState","setNumbers","setNumsTotal","sortingAlgo","setSortingAlgo","speed","setSpeed","animeProgressID","colorBlue","numBars","setBarColor","color","document","getElementById","style","backgroundColor","toggleBarColor","targetColor","setBarHeight","height","barStyle","borderTopWidth","NUMBER_MAX","resetNumbers","returnNumbers","clearInterval","disabled","newNumbers","newNumber","random","buttons","disableAlgoButtons","disableSettingButtons","sortNumbers","animation","start","algo","reloadSettings","sortingAnime","stop","lastAction","setInterval","action","shift","undefined","indices","height1","height2","heights","sortingAlgoNames","Object","keys","disable","forEach","algoName","settings","setting","buttonName","toUpperCase","substr","value","useEffect","Fragment","className","map","number","id","borderTop","onClick","placeholder","class","alert","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.2f87c44d.chunk.js","sourcesContent":["/*\r\nsorting algorithms included:\r\n  bubbleSort, selectionSort, insertionSort,\r\n  mergeSort, quickSort, !!!!!radixSort\r\n\r\nparameters:\r\n  numbers: array of unsorted numbers\r\n  range: range of current subarray (for recursive algos)\r\n        format [startIdx, endIdx]\r\n  numActions: swap/toggle/set actions on numbers for animation\r\n            format {\r\n              swap: bool,\r\n              swapIndices: [],\r\n              toggle: bool,\r\n              toggleIndices: [],\r\n              set: bool,\r\n              setIndices: [],\r\n              setHeights: []\r\n            }\r\n*/\r\nconst sortingAlgos = {\r\n  // bubbleSort: sort numbers by swapping unsorted adjacent numbers\r\n  //    traverse from the beginning to the end\r\n  //    check if two adjacent numbers are sorted (num1 <= num2)\r\n  //    if unsorted, swap them\r\n  //    keep iterating until no swap is needed for the entire array\r\n  bubbleSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n    let swapped = true;\r\n\r\n    while (swapped) {\r\n      swapped = false;\r\n      for (let i = 0; i < nums.length - 1; i++) {\r\n        let numAction = { swap: false, swapIndices: [i, i + 1] };\r\n        let num1 = nums[i];\r\n        let num2 = nums[i + 1];\r\n        if (num1 > num2) {\r\n          nums[i] = num2;\r\n          nums[i + 1] = num1;\r\n          swapped = true;\r\n          numAction.swap = true;\r\n        }\r\n        numActions.push(numAction);\r\n      }\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  oddEvenSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n    let prevRunSorted = false;\r\n    let curRunSorted = false;\r\n\r\n    let startIdx = 1;\r\n    let toggleIndices = [];\r\n    for (let idx = startIdx; idx < nums.length - 1; idx += 2) {\r\n      toggleIndices.push(idx);\r\n    }\r\n    numActions.push({\r\n      toggle: true,\r\n      toggleIndices,\r\n    });\r\n    while (!prevRunSorted || !curRunSorted) {\r\n      prevRunSorted = curRunSorted;\r\n      curRunSorted = true;\r\n      toggleIndices = [];\r\n      for (let idx = startIdx; idx < nums.length - 1; idx += 2) {\r\n        toggleIndices.push(idx);\r\n      }\r\n      numActions.push({\r\n        toggle: true,\r\n        toggleIndices,\r\n      });\r\n      for (let idx = startIdx; idx < nums.length - 1; idx += 2) {\r\n        let numAction = { swap: false, swapIndices: [idx, idx + 1] };\r\n        if (nums[idx] > nums[idx + 1]) {\r\n          curRunSorted = false;\r\n          nums[idx] = nums[idx] ^ nums[idx + 1];\r\n          nums[idx + 1] = nums[idx] ^ nums[idx + 1];\r\n          nums[idx] = nums[idx] ^ nums[idx + 1];\r\n          numAction.swap = true;\r\n        }\r\n        numActions.push(numAction);\r\n      }\r\n      // toggle odd/even mode\r\n      startIdx = 1 - startIdx;\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  selectionSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n\r\n    for (let curIdx = 0; curIdx < nums.length - 1; curIdx++) {\r\n      let curNumber = nums[curIdx];\r\n      let minIdx = curIdx;\r\n      let minNumber = curNumber;\r\n      for (let idx = curIdx + 1; idx < nums.length; idx++) {\r\n        numActions.push({ swap: false, swapIndices: [curIdx, idx] });\r\n        if (nums[idx] < minNumber) {\r\n          if (minIdx !== curIdx) {\r\n            numActions.push({\r\n              swap: false,\r\n              swapIndices: [curIdx],\r\n              toggle: true,\r\n              toggleIndices: [minIdx],\r\n            });\r\n          }\r\n          numActions.push({\r\n            swap: false,\r\n            swapIndices: [curIdx],\r\n            toggle: true,\r\n            toggleIndices: [idx],\r\n          });\r\n          minIdx = idx;\r\n          minNumber = nums[idx];\r\n        }\r\n      }\r\n      if (minIdx !== curIdx) {\r\n        nums[curIdx] = nums[minIdx];\r\n        nums[minIdx] = curNumber;\r\n        numActions.push({ swap: true, swapIndices: [curIdx, minIdx] });\r\n      }\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  // insertionSort: sort numbers by inserting everyone at its correct index\r\n  //    traverse array from the beginning to the end\r\n  //    for each number, traverse from the beginning to find\r\n  //    the first number which the current number is less than\r\n  //    then insert the current number at that index\r\n  //    iterate from idx 0 to length-1\r\n  insertionSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n\r\n    for (let curIdx = 1; curIdx < nums.length; curIdx++) {\r\n      for (let targetIdx = 0; targetIdx < curIdx; targetIdx++) {\r\n        let curNumber = nums[curIdx];\r\n        if (curNumber < nums[targetIdx]) {\r\n          numActions.push({\r\n            toggle: true,\r\n            toggleIndices: [targetIdx],\r\n          });\r\n          for (let idx = curIdx; idx > targetIdx; idx--) {\r\n            nums[idx] = nums[idx - 1];\r\n            numActions.push({ swap: true, swapIndices: [idx, idx - 1] });\r\n          }\r\n          nums[targetIdx] = curNumber;\r\n          break;\r\n        } else {\r\n          numActions.push({ swap: false, swapIndices: [curIdx, targetIdx] });\r\n        }\r\n      }\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  // cycleSort: sort numbers by putting them at their correct indices\r\n  //    for each number, its correct index = count of numbers less than it\r\n  //    keep iterating until every number is at its correct index\r\n  cycleSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n    let length = nums.length;\r\n\r\n    let curIdx = 0;\r\n    while (curIdx < length - 1) {\r\n      let curNum = nums[curIdx];\r\n      let numsLessTotal = -1;\r\n\r\n      while (curIdx !== numsLessTotal) {\r\n        console.log(\"curIdx \", curIdx, \"curNum \", curNum);\r\n        numsLessTotal = curIdx;\r\n        for (let idx = curIdx + 1; idx < length; idx++) {\r\n          numActions.push({ swap: false, swapIndices: [curIdx, idx] });\r\n          if (nums[idx] < curNum) {\r\n            numsLessTotal++;\r\n          }\r\n        }\r\n        console.log(\"correct pos \", numsLessTotal);\r\n        if (curIdx !== numsLessTotal) {\r\n          while (curNum === nums[numsLessTotal] && numsLessTotal !== curIdx) {\r\n            numsLessTotal++;\r\n            numActions.push({\r\n              swap: false,\r\n              swapIndices: [curIdx, numsLessTotal],\r\n            });\r\n          }\r\n          if (curIdx !== numsLessTotal) {\r\n            curNum = nums[numsLessTotal];\r\n            nums[numsLessTotal] = nums[curIdx] ^ nums[numsLessTotal];\r\n            nums[curIdx] = nums[curIdx] ^ nums[numsLessTotal];\r\n            nums[numsLessTotal] = nums[curIdx] ^ nums[numsLessTotal];\r\n            numActions.push({\r\n              toggle: true,\r\n              toggleIndices: [curIdx, numsLessTotal],\r\n            });\r\n            numActions.push({\r\n              swap: true,\r\n              swapIndices: [curIdx, numsLessTotal],\r\n            });\r\n          }\r\n        }\r\n      }\r\n      nums[curIdx] = curNum;\r\n      curIdx++;\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  // radixSort: sort numbers from LSB to MSB (decimal base)\r\n  radixSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n    let length = nums.length;\r\n\r\n    let divisor = 10;\r\n    let prevDivisor = 1;\r\n    let digits = [];\r\n    for (let digit = -9; digit <= 9; digit++) {\r\n      digits.push(digit);\r\n    }\r\n\r\n    let noMoreDigits = false;\r\n    while (!noMoreDigits) {\r\n      noMoreDigits = true;\r\n\r\n      // count number of appearance for each digit (-9 ~ 9)\r\n      let counts = new Array(digits.length).fill(0);\r\n      for (let idx = 0; idx < length; idx++) {\r\n        numActions.push({\r\n          swap: false,\r\n          swapIndices: [idx],\r\n        });\r\n        let digitIdx = digits.indexOf(\r\n          ((nums[idx] % divisor) - (nums[idx] % prevDivisor)) / prevDivisor\r\n        );\r\n        counts[digitIdx]++;\r\n        if (\r\n          noMoreDigits &&\r\n          (nums[idx] % (divisor * 10)) - (nums[idx] % divisor) !== 0\r\n        ) {\r\n          noMoreDigits = false;\r\n        }\r\n      }\r\n      // find correct positions of each digit based on total counts of prev digits\r\n      for (let idx = 1; idx < counts.length; idx++) {\r\n        counts[idx] += counts[idx - 1];\r\n      }\r\n      // put numbers in their correct position in a new array\r\n      let newNums = [...nums];\r\n      for (let idx = length - 1; idx >= 0; idx--) {\r\n        let curNum = nums[idx];\r\n        let digitIdx = digits.indexOf(\r\n          ((curNum % divisor) - (curNum % prevDivisor)) / prevDivisor\r\n        );\r\n        let targetIdx = counts[digitIdx] - 1;\r\n        numActions.push({\r\n          toggle: true,\r\n          toggleIndices: [targetIdx],\r\n          set: true,\r\n          setIndices: [targetIdx],\r\n          setHeights: [curNum],\r\n        });\r\n        newNums[targetIdx] = curNum;\r\n        counts[digitIdx]--;\r\n      }\r\n      // keep going for the next more significant bit\r\n      nums = newNums;\r\n      prevDivisor = divisor;\r\n      divisor *= 10;\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  mergeSort: function (nums, range = [0, nums.length - 1], numActions = []) {\r\n    let numsTotal = nums.length;\r\n    let actions = [];\r\n\r\n    // base cases\r\n    if (numsTotal === 1) {\r\n      actions.push({ set: true, setIndices: [range[0]], setHeights: [nums] });\r\n      return { numsSorted: nums, range: [range[0]], numActions: [] };\r\n    }\r\n    if (numsTotal === 2) {\r\n      if (nums[0] > nums[1]) {\r\n        nums = nums.reverse();\r\n      }\r\n      for (let idx = 0; idx < numsTotal; idx++) {\r\n        actions.push({\r\n          swap: false,\r\n          swapIndices: [range[0] + idx],\r\n          set: true,\r\n          setIndices: [],\r\n          setHeights: [nums[idx]],\r\n        });\r\n      }\r\n      return { numsSorted: nums, range, numActions: actions };\r\n    }\r\n\r\n    // recursively call mergeSort on left and right subarray\r\n    let middleIdx = Math.floor(numsTotal / 2);\r\n    let {\r\n      numsSorted: numsSortedLeft,\r\n      numActions: actionsLeft,\r\n    } = this.mergeSort(nums.slice(0, middleIdx), [\r\n      range[0],\r\n      range[0] + middleIdx - 1,\r\n    ]);\r\n    let {\r\n      numsSorted: numsSortedRight,\r\n      numActions: actionsRight,\r\n    } = this.mergeSort(nums.slice(middleIdx), [range[0] + middleIdx, range[1]]);\r\n    // store sorting actions returned by mergeSort on subarrays\r\n    numActions = numActions.concat([...actionsLeft, ...actionsRight]);\r\n\r\n    // merge left and right sorted subarray to a single array\r\n    let numLeftIdx = 0;\r\n    let numRightIdx = 0;\r\n    let numsSorted = [];\r\n    // put nums from two subarrays into one array\r\n    while (\r\n      numLeftIdx < numsSortedLeft.length &&\r\n      numRightIdx < numsSortedRight.length\r\n    ) {\r\n      let numLeft = numsSortedLeft[numLeftIdx];\r\n      let numRight = numsSortedRight[numRightIdx];\r\n      if (numLeft < numRight) {\r\n        numsSorted.push(numLeft);\r\n        numLeftIdx++;\r\n      } else {\r\n        numsSorted.push(numRight);\r\n        numRightIdx++;\r\n      }\r\n    }\r\n    if (numLeftIdx < numsSortedLeft.length) {\r\n      for (let idx = numLeftIdx; idx < numsSortedLeft.length; idx++) {\r\n        numsSorted.push(numsSortedLeft[idx]);\r\n      }\r\n    } else {\r\n      for (let idx = numRightIdx; idx < numsSortedRight.length; idx++) {\r\n        numsSorted.push(numsSortedRight[idx]);\r\n      }\r\n    }\r\n    // return sorting actions for animation\r\n    for (let idx = 0; idx < numsSorted.length; idx++) {\r\n      numActions.push({\r\n        set: true,\r\n        setIndices: [range[0] + idx],\r\n        setHeights: [numsSorted[idx]],\r\n      });\r\n    }\r\n\r\n    return { numsSorted, range, numActions };\r\n  },\r\n\r\n  quickSort: function (nums, range = [0, nums.length - 1], numActions = []) {\r\n    nums = [...nums];\r\n    let length = nums.length;\r\n    // base cases\r\n    if (length === 2) {\r\n      let numsSorted = [];\r\n      let numAction = {};\r\n      if (nums[0] <= nums[1]) {\r\n        numsSorted = nums;\r\n        numAction = { swap: false, swapIndices: [range[0], range[1]] };\r\n      } else {\r\n        numsSorted = nums.reverse();\r\n        numAction = { swap: true, swapIndices: [range[0], range[1]] };\r\n      }\r\n      numActions.push(numAction);\r\n      return { numsSorted, range, numActions };\r\n    }\r\n\r\n    // recursive calls\r\n    let pivotIdx = length - 1;\r\n    numActions.push({ toggle: true, toggleIndices: [range[0] + pivotIdx] });\r\n    let numLeftIdx = 0;\r\n    let numRightIdx = pivotIdx - 1;\r\n    numActions.push({\r\n      swap: false,\r\n      swapIndices: [range[0] + numLeftIdx, range[0] + numRightIdx],\r\n    });\r\n\r\n    while (numLeftIdx < numRightIdx) {\r\n      let numAction = {\r\n        swap: false,\r\n        swapIndices: [range[0] + numLeftIdx, range[0] + numRightIdx],\r\n      };\r\n      // find a number on the left that > pivot number\r\n      if (nums[numLeftIdx] <= nums[pivotIdx]) {\r\n        numLeftIdx++;\r\n        numAction.swapIndices[0]++;\r\n      }\r\n      // fing a number on the right that < pivot number\r\n      else if (nums[numRightIdx] >= nums[pivotIdx]) {\r\n        numRightIdx--;\r\n        numAction.swapIndices[1]--;\r\n      }\r\n      // swap these two numbers so that newLeft < pivotNum < newRight\r\n      else {\r\n        nums[numLeftIdx] = nums[numLeftIdx] ^ nums[numRightIdx];\r\n        nums[numRightIdx] = nums[numLeftIdx] ^ nums[numRightIdx];\r\n        nums[numLeftIdx] = nums[numLeftIdx] ^ nums[numRightIdx];\r\n        numAction.swap = true;\r\n      }\r\n      numActions.push(numAction);\r\n    }\r\n    // check the number at idx = numLeftIdx = numRightIdx\r\n    let pivotNum = nums[pivotIdx];\r\n    if (nums[numLeftIdx] <= pivotNum) {\r\n      pivotIdx = numLeftIdx + 1;\r\n    } else {\r\n      pivotIdx = numLeftIdx;\r\n    }\r\n    // move pivot number to its correct position so that lefts < pivot < rights\r\n    for (let idx = length - 1; idx > pivotIdx; idx--) {\r\n      nums[idx] = nums[idx - 1];\r\n      numActions.push({\r\n        swap: false,\r\n        swapIndices: [range[0] + idx - 1, range[0] + idx],\r\n        set: true,\r\n        setIndices: [range[0] + idx],\r\n        setHeights: [nums[idx - 1]],\r\n      });\r\n    }\r\n    nums[pivotIdx] = pivotNum;\r\n    numActions.push({\r\n      toggle: true,\r\n      toggleIndices: [range[0] + pivotIdx],\r\n      set: true,\r\n      setIndices: [range[0] + pivotIdx],\r\n      setHeights: [pivotNum],\r\n    });\r\n\r\n    let numsSortedLeft = nums.slice(0, pivotIdx);\r\n    if (pivotIdx > 1) {\r\n      let obj = this.quickSort(\r\n        numsSortedLeft,\r\n        [range[0], range[0] + pivotIdx - 1],\r\n        numActions\r\n      );\r\n      numsSortedLeft = obj.numsSorted;\r\n      numActions = obj.numActions;\r\n    }\r\n    let numsSortedRight = nums.slice(pivotIdx + 1, length);\r\n    if (pivotIdx < length - 2) {\r\n      let obj = this.quickSort(\r\n        numsSortedRight,\r\n        [range[0] + pivotIdx + 1, range[1]],\r\n        numActions\r\n      );\r\n      numsSortedRight = obj.numsSorted;\r\n      numActions = obj.numActions;\r\n    }\r\n    nums = [...numsSortedLeft, pivotNum, ...numsSortedRight];\r\n\r\n    return {\r\n      numsSorted: nums,\r\n      range,\r\n      numActions,\r\n    };\r\n  },\r\n};\r\n\r\nexport default sortingAlgos;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./css/Numbers.css\";\r\nimport sortingAlgos from \"./sortingAlgos\";\r\n\r\nfunction Numbers() {\r\n  // state values\r\n  const [numbers, setNumbers] = useState([]);\r\n  const [numsTotal, setNumsTotal] = useState(200);\r\n  const [sortingAlgo, setSortingAlgo] = useState(\" \");\r\n  const [speed, setSpeed] = useState(30);\r\n  let animeProgressID = null;\r\n\r\n  // color codes\r\n  const colorOrange = \"rgb(247, 116, 45)\";\r\n  const colorBlue = \"rgb(49, 109, 165)\";\r\n  const colorGrey = \"rgb(224, 224, 224)\";\r\n  const colorViolet = \"rgb(220, 58, 252)\";\r\n\r\n  // design related constants\r\n  const NUMBER_MAX = 690;\r\n  const NUMBER_MIN = 10;\r\n  const CANVAS_HEIGHT = NUMBER_MAX + NUMBER_MIN;\r\n\r\n  const numBars = {\r\n    // method for changing number bar color\r\n    setBarColor: function (idx, color) {\r\n      document.getElementById(`number${idx}`).style.backgroundColor = color;\r\n    },\r\n    // method for toggling number bar between blue and target color\r\n    toggleBarColor: function (idx, targetColor) {\r\n      if (\r\n        document.getElementById(`number${idx}`).style.backgroundColor !==\r\n        colorBlue\r\n      ) {\r\n        this.setBarColor(idx, colorBlue);\r\n      } else {\r\n        this.setBarColor(idx, targetColor);\r\n      }\r\n    },\r\n    // method for changing number bar height\r\n    setBarHeight: function (idx, height) {\r\n      let barStyle = document.getElementById(`number${idx}`).style;\r\n      barStyle.height = `${height}px`;\r\n      barStyle.borderTopWidth = `${CANVAS_HEIGHT - height}px`;\r\n    },\r\n    // function for resetting numbers\r\n    resetNumbers: function (returnNumbers = false) {\r\n      if (animeProgressID !== null) {\r\n        clearInterval(animeProgressID);\r\n        animeProgressID = null;\r\n        for (let i = 0; i < numsTotal; i++) {\r\n          let barStyle = document.getElementById(`number${i}`).style;\r\n          if (barStyle.backgroundColor === colorBlue) {\r\n            continue;\r\n          }\r\n          barStyle.backgroundColor = colorBlue;\r\n        }\r\n      }\r\n      document.getElementById(\"button-start\").disabled = true;\r\n\r\n      let newNumbers = [];\r\n      for (let i = 0; i < numsTotal; i++) {\r\n        let newNumber = Math.floor(Math.random() * 680 + 10);\r\n        newNumbers.push(newNumber);\r\n      }\r\n      setNumbers(newNumbers);\r\n      setSortingAlgo(\"\");\r\n      buttons.disableAlgoButtons(false);\r\n      buttons.disableSettingButtons(false);\r\n\r\n      if (returnNumbers) return newNumbers;\r\n    },\r\n    sortNumbers: function (nums) {\r\n      let { numsSorted } = sortingAlgos.mergeSort(nums);\r\n      setNumbers(numsSorted);\r\n    },\r\n  };\r\n\r\n  // functions to start and stop sorting animation\r\n  const animation = {\r\n    start: function (nums, algo) {\r\n      buttons.disableAlgoButtons(true);\r\n      buttons.disableSettingButtons(true);\r\n      buttons.reloadSettings();\r\n      this.sortingAnime(nums, algo);\r\n    },\r\n    stop: function () {\r\n      clearInterval(animeProgressID);\r\n      animeProgressID = null;\r\n      setSortingAlgo(\"\");\r\n      buttons.disableAlgoButtons(false);\r\n      buttons.disableSettingButtons(false);\r\n    },\r\n    // method for visualizing sorting algorithms\r\n    sortingAnime: function (nums, algo) {\r\n      let { numActions: actions } = sortingAlgos[algo](nums);\r\n      let lastAction = actions[0];\r\n      animeProgressID = setInterval(() => {\r\n        let action = actions.shift();\r\n        //console.log(action); //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!debug\r\n        if (lastAction.swap !== undefined) {\r\n          for (let idx of lastAction.swapIndices) {\r\n            numBars.setBarColor(idx, colorBlue);\r\n          }\r\n        } else if (lastAction.set !== undefined) {\r\n          for (let idx of lastAction.setIndices) {\r\n            numBars.setBarColor(idx, colorBlue);\r\n          }\r\n        }\r\n        // if no further action, stop animation and reset buttons\r\n        if (action === undefined) {\r\n          this.stop();\r\n          return;\r\n        }\r\n        // swap numbers if requested\r\n        if (action.swap !== undefined) {\r\n          let indices = action.swapIndices;\r\n          for (let idx of indices) {\r\n            numBars.setBarColor(idx, colorOrange);\r\n          }\r\n          if (action.swap) {\r\n            //console.log(\"swapping \", indices[0], indices[1]);///////debug\r\n            let height1 = numbers[indices[0]];\r\n            let height2 = numbers[indices[1]];\r\n            numBars.setBarHeight(indices[0], height2);\r\n            numBars.setBarHeight(indices[1], height1);\r\n            numbers[indices[0]] = height2;\r\n            numbers[indices[1]] = height1;\r\n          }\r\n        }\r\n        // set target numbers if requested\r\n        if (action.set !== undefined) {\r\n          let indices = action.setIndices;\r\n          let heights = action.setHeights;\r\n          for (let idx = 0; idx < indices.length; idx++) {\r\n            numBars.setBarHeight(indices[idx], heights[idx]);\r\n            //numBars.setBarColor(indices[idx], colorOrange);\r\n            numbers[indices[idx]] = heights[idx];\r\n          }\r\n        }\r\n        // highlight target numbers if requested\r\n        if (action.toggle !== undefined) {\r\n          let indices = action.toggleIndices;\r\n          for (let idx of indices) {\r\n            numBars.toggleBarColor(idx, colorViolet);\r\n          }\r\n        }\r\n        lastAction = action;\r\n      }, speed);\r\n      document.getElementById(\"button-start\").disabled = true;\r\n    },\r\n  };\r\n\r\n  const buttons = {\r\n    sortingAlgoNames: Object.keys(sortingAlgos),\r\n    disableAlgoButtons: function (disable) {\r\n      this.sortingAlgoNames.forEach((algoName) => {\r\n        document.getElementById(`button-${algoName}`).disabled = disable;\r\n      });\r\n    },\r\n    settings: [\"speed\", \"numsTotal\"],\r\n    disableSettingButtons: function (disable) {\r\n      this.settings.forEach((setting) => {\r\n        let buttonName = `set${setting[0].toUpperCase()}${setting.substr(1)}`;\r\n        document.getElementById(`button-${buttonName}`).disabled = disable;\r\n        document.getElementById(`input-${setting}`).disabled = disable;\r\n      });\r\n    },\r\n    reloadSettings: function () {\r\n      this.settings.forEach((setting) => {\r\n        document.getElementById(`input-${setting}`).value = \"\";\r\n      });\r\n    },\r\n  };\r\n\r\n  // reset numbers at start up\r\n  useEffect(() => {\r\n    numBars.resetNumbers();\r\n  }, [numsTotal]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"title-container\"></div>\r\n      <div className=\"numbers-container\">\r\n        {numbers.map((number, idx) => (\r\n          <span\r\n            className=\"number-bar\"\r\n            id={`number${idx}`}\r\n            key={idx}\r\n            style={{\r\n              height: `${number}px`,\r\n              borderTop: `${CANVAS_HEIGHT - number}px solid ${colorGrey}`,\r\n            }}\r\n          ></span>\r\n        ))}\r\n      </div>\r\n      <div className=\"buttons-container\">\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-sortedRefresh\"\r\n          onClick={() => {\r\n            numBars.sortNumbers(numBars.resetNumbers(true));\r\n          }}\r\n        >\r\n          Sorted Refresh\r\n        </button>\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-refresh\"\r\n          onClick={numBars.resetNumbers}\r\n        >\r\n          Refresh\r\n        </button>\r\n        <textarea\r\n          id=\"input-speed\"\r\n          placeholder={speed}\r\n          class=\"textarea-setting\"\r\n        ></textarea>\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-setSpeed\"\r\n          onClick={() => {\r\n            let value = document.getElementById(\"input-speed\").value;\r\n            if (value > 0) {\r\n              setSpeed(value);\r\n            } else {\r\n              alert(\"Please enter a number greater than 0\");\r\n            }\r\n            buttons.reloadSettings();\r\n          }}\r\n        >\r\n          SetSpeed\r\n        </button>\r\n        <textarea\r\n          id=\"input-numsTotal\"\r\n          placeholder={numsTotal}\r\n          class=\"textarea-setting\"\r\n        ></textarea>\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-setNumsTotal\"\r\n          onClick={() => {\r\n            let value = document.getElementById(\"input-numsTotal\").value;\r\n            if (value > 0 && value <= 280) {\r\n              setNumsTotal(value);\r\n            } else {\r\n              alert(\"Please enter a number between 0 ~ 280\");\r\n            }\r\n            buttons.reloadSettings();\r\n          }}\r\n        >\r\n          SetNumsTotal\r\n        </button>\r\n        {buttons.sortingAlgoNames.map((algoName, idx) => (\r\n          <button\r\n            className=\"button-algo\"\r\n            id={`button-${algoName}`}\r\n            key={idx}\r\n            onClick={() => {\r\n              setSortingAlgo(algoName);\r\n              document.getElementById(\"button-start\").disabled = false;\r\n            }}\r\n          >\r\n            {algoName}\r\n          </button>\r\n        ))}\r\n        <button\r\n          className=\"button-misc\"\r\n          id=\"button-start\"\r\n          onClick={() => {\r\n            animation.start(numbers, sortingAlgo);\r\n          }}\r\n        >\r\n          Start\r\n        </button>\r\n      </div>\r\n      <div className=\"messages-container\">\r\n        <p id=\"message-algo\">Pick an algorithm: {sortingAlgo}</p>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Numbers;\r\n","import Numbers from \"./Numbers\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Numbers />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}