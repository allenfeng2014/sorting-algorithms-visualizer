{"version":3,"sources":["constants/numBarsConstants.js","components/Numbers.jsx","components/Buttons.jsx","components/Messages.jsx","utils/sortingAlgos.js","utils/buttons.js","utils/numBars.js","utils/animator.js","App.js","index.js"],"names":["numBarsConstants","colorOrange","colorBlue","colorGrey","colorViolet","NUMBER_MAX","Math","floor","window","innerHeight","NUMBER_MIN","ceil","CANVAS_HEIGHT","Numbers","numbers","className","map","number","idx","id","style","height","borderTop","Buttons","speed","numsTotal","sortingAlgoNames","handlers","onClick","refresh","placeholder","setSpeed","setNumsTotal","algoName","value","setSortingAlgo","start","Messages","sortingAlgo","sortingAlgos","bubbleSort","a","nums","animator","swapped","i","length","numAction","swap","swapIndices","num1","num2","oddEvenSort","prevRunSorted","curRunSorted","startIdx","toggleIndices","push","toggle","selectionSort","curIdx","curNumber","minIdx","minNumber","insertionSort","targetIdx","cycleSort","curNum","numsLessTotal","radixSort","divisor","prevDivisor","digits","digit","noMoreDigits","counts","Array","fill","digitIdx","indexOf","newNums","set","setIndices","setHeights","mergeSort","range","animatorOn","undefined","numsSorted","reverse","middleIdx","this","slice","resultLeft","resultRight","numsSortedLeft","numsSortedRight","shift","quickSort","pivotIdx","numLeftIdx","numRightIdx","pivotNum","buttons","Object","keys","settings","disableSettingButtons","disable","forEach","setting","buttonName","toUpperCase","substr","document","querySelector","disabled","reloadSettings","numBars","setBarColor","color","backgroundColor","toggleBarColor","targetColor","setBarHeight","barStyle","borderTopWidth","resetNumbers","querySelectorAll","numBar","console","log","newNumbers","newNumber","random","Animator","setAnimatorOn","setNumbers","newSpeed","algo","stop","lastAction","action","constants","indices","height1","height2","heights","Promise","resolve","setTimeout","App","useState","useEffect","sorted","sort","b","alert","numsTotalMax","innerWidth","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.131f16ac.chunk.js","sourcesContent":["const numBarsConstants = {\r\n  // color codes\r\n  colorOrange: \"rgb(247, 116, 45)\",\r\n  colorBlue: \"rgb(49, 109, 165)\",\r\n  colorGrey: \"rgb(224, 224, 224)\",\r\n  colorViolet: \"rgb(220, 58, 252)\",\r\n  // design related constants\r\n  NUMBER_MAX: Math.floor((window.innerHeight - 220) * 0.99),\r\n  NUMBER_MIN: Math.ceil((window.innerHeight - 220) * 0.01),\r\n  CANVAS_HEIGHT: window.innerHeight - 220,\r\n};\r\n\r\nexport default numBarsConstants;\r\n","import React from \"react\";\r\nimport \"../css/Numbers.css\";\r\nimport numBarsConstants from \"../constants/numBarsConstants\";\r\n\r\nfunction Numbers({ numbers }) {\r\n  const { CANVAS_HEIGHT, colorGrey } = numBarsConstants;\r\n  return (\r\n    <div className=\"numbers-container\">\r\n      {numbers.map((number, idx) => (\r\n        <span\r\n          className=\"number-bar\"\r\n          id={`number${idx}`}\r\n          key={idx}\r\n          style={{\r\n            height: `${number}px`,\r\n            borderTop: `${CANVAS_HEIGHT - number}px solid ${colorGrey}`,\r\n          }}\r\n        ></span>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Numbers;\r\n","import React from \"react\";\r\nimport \"../css/Buttons.css\";\r\n\r\nfunction Buttons({ speed, numsTotal, sortingAlgoNames, handlers }) {\r\n  return (\r\n    <div className=\"buttons-container\">\r\n      <button\r\n        className=\"button-misc\"\r\n        id=\"button-sortedRefresh\"\r\n        onClick={() => {\r\n          handlers.refresh(true);\r\n        }}\r\n      >\r\n        Sorted Refresh\r\n      </button>\r\n      <button\r\n        className=\"button-misc\"\r\n        id=\"button-refresh\"\r\n        onClick={() => {\r\n          handlers.refresh(false);\r\n        }}\r\n      >\r\n        Refresh\r\n      </button>\r\n\r\n      {/*change textarea to input maybe ???*/}\r\n      <textarea\r\n        className=\"textarea-setting\"\r\n        id=\"input-speed\"\r\n        placeholder={`${speed} ms`}\r\n      ></textarea>\r\n      <button\r\n        className=\"button-misc\"\r\n        id=\"button-setSpeed\"\r\n        onClick={handlers.setSpeed}\r\n      >\r\n        SetSpeed\r\n      </button>\r\n      <textarea\r\n        className=\"textarea-setting\"\r\n        id=\"input-numsTotal\"\r\n        placeholder={numsTotal}\r\n      ></textarea>\r\n      <button\r\n        className=\"button-misc\"\r\n        id=\"button-setNumsTotal\"\r\n        onClick={handlers.setNumsTotal}\r\n      >\r\n        SetNumsTotal\r\n      </button>\r\n      <select id=\"input-sortingAlgo\">\r\n        {sortingAlgoNames.map((algoName, idx) => (\r\n          <option value={algoName} key={idx}>\r\n            {algoName}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button\r\n        className=\"button-misc\"\r\n        id=\"button-setSortingAlgo\"\r\n        onClick={handlers.setSortingAlgo}\r\n      >\r\n        SetAlgorithm\r\n      </button>\r\n\r\n      <button\r\n        className=\"button-misc\"\r\n        id=\"button-start\"\r\n        onClick={handlers.start}\r\n      >\r\n        Start\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"../css/Messages.css\";\r\n\r\nfunction Messages({ speed, sortingAlgo, numsTotal }) {\r\n  return (\r\n    <div className=\"messages-container\">\r\n      <span className=\"message-block\" id=\"message-refresh\">\r\n        Generate new numbers\r\n      </span>\r\n      <span className=\"message-block\" id=\"message-settings\">\r\n        Animation settings:\r\n        <b>{`${speed} ms/frame, ${numsTotal} nums`}</b>\r\n      </span>\r\n      <span className=\"message-block\" id=\"message-algo\">\r\n        {sortingAlgo ? (\r\n          <span>\r\n            Algorithm: <b>{sortingAlgo}</b>\r\n          </span>\r\n        ) : (\r\n          <b>Pick an algorithm !!!!!</b>\r\n        )}\r\n      </span>\r\n      <span className=\"message-block\" id=\"message-start\">\r\n        Start\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Messages;\r\n","/*\r\nsorting algorithms included:\r\n  bubbleSort, oddEvenSort, selectionSort, insertionSort,\r\n  mergeSort, quickSort, cycleSort, radixSort\r\n\r\nparameters:\r\n  numbers: array of unsorted numbers\r\n  range: range of current subarray (for recursive algos)\r\n        format [startIdx, endIdx]\r\n  numActions: swap/toggle/set actions on numbers for animation\r\n            format {\r\n              swap: bool,\r\n              swapIndices: [],\r\n              toggle: bool,\r\n              toggleIndices: [],\r\n              set: bool,\r\n              setIndices: [],\r\n              setHeights: []\r\n            }\r\n*/\r\nconst sortingAlgos = {\r\n  // bubbleSort: sort numbers by swapping unsorted adjacent numbers\r\n  //    traverse from the beginning to the end\r\n  //    check if two adjacent numbers are sorted (num1 <= num2).\r\n  //    if unsorted, swap them.\r\n  //    keep iterating until no swap is needed for the entire array.\r\n  bubbleSort: async function ({ nums: numbers, animator }) {\r\n    let animatorOn = true;\r\n    let nums = [...numbers];\r\n    let swapped = true;\r\n\r\n    while (swapped) {\r\n      swapped = false;\r\n      for (let i = 0; i < nums.length - 1; i++) {\r\n        let numAction = { swap: false, swapIndices: [i, i + 1] };\r\n        let num1 = nums[i];\r\n        let num2 = nums[i + 1];\r\n        if (num1 > num2) {\r\n          nums[i] = num2;\r\n          nums[i + 1] = num1;\r\n          swapped = true;\r\n          numAction.swap = true;\r\n        }\r\n        // call async animator and wait for its completion\r\n        animatorOn = await animator(numAction);\r\n        // stop if animator is refreshed by user\r\n        if (!animatorOn) return;\r\n      }\r\n    }\r\n\r\n    return;\r\n  },\r\n\r\n  oddEvenSort: async function ({ nums: numbers, animator }) {\r\n    let animatorOn = true;\r\n    let nums = [...numbers];\r\n    let prevRunSorted = false;\r\n    let curRunSorted = false;\r\n\r\n    let startIdx = 1;\r\n    let toggleIndices = [];\r\n    while (!prevRunSorted || !curRunSorted) {\r\n      prevRunSorted = curRunSorted;\r\n      curRunSorted = true;\r\n      toggleIndices = [];\r\n      for (let idx = startIdx; idx < nums.length - 1; idx += 2) {\r\n        toggleIndices.push(idx);\r\n      }\r\n\r\n      // call animator, interrupt if requested\r\n      animatorOn = await animator({ toggle: true, toggleIndices });\r\n      if (!animatorOn) return;\r\n\r\n      for (let idx = startIdx; idx < nums.length - 1; idx += 2) {\r\n        let numAction = { swap: false, swapIndices: [idx, idx + 1] };\r\n        if (nums[idx] > nums[idx + 1]) {\r\n          curRunSorted = false;\r\n          nums[idx] = nums[idx] ^ nums[idx + 1];\r\n          nums[idx + 1] = nums[idx] ^ nums[idx + 1];\r\n          nums[idx] = nums[idx] ^ nums[idx + 1];\r\n          numAction.swap = true;\r\n        }\r\n        // call animator, interrupt if requested\r\n        animatorOn = await animator(numAction);\r\n        if (!animatorOn) return;\r\n      }\r\n      // toggle odd/even mode\r\n      startIdx = 1 - startIdx;\r\n    }\r\n\r\n    return;\r\n  },\r\n\r\n  selectionSort: async function ({ nums: numbers, animator }) {\r\n    let animatorOn = true;\r\n    let nums = [...numbers];\r\n\r\n    for (let curIdx = 0; curIdx < nums.length - 1; curIdx++) {\r\n      let curNumber = nums[curIdx];\r\n      let minIdx = curIdx;\r\n      let minNumber = curNumber;\r\n      for (let idx = curIdx + 1; idx < nums.length; idx++) {\r\n        // call animator, interrupt if requested\r\n        animatorOn = await animator({\r\n          swap: false,\r\n          swapIndices: [curIdx, idx],\r\n        });\r\n        if (!animatorOn) return;\r\n\r\n        if (nums[idx] < minNumber) {\r\n          if (minIdx !== curIdx) {\r\n            // call animator, interrupt if requested\r\n            animatorOn = await animator({\r\n              swap: false,\r\n              swapIndices: [curIdx],\r\n              toggle: true,\r\n              toggleIndices: [minIdx],\r\n            });\r\n            if (!animatorOn) return;\r\n          }\r\n          // call animator, interrupt if requested\r\n          animatorOn = await animator({\r\n            swap: false,\r\n            swapIndices: [curIdx],\r\n            toggle: true,\r\n            toggleIndices: [idx],\r\n          });\r\n          if (!animatorOn) return;\r\n\r\n          minIdx = idx;\r\n          minNumber = nums[idx];\r\n        }\r\n      }\r\n      if (minIdx !== curIdx) {\r\n        nums[curIdx] = nums[minIdx];\r\n        nums[minIdx] = curNumber;\r\n        // call animator, interrupt if requested\r\n        animatorOn = await animator({\r\n          swap: true,\r\n          swapIndices: [curIdx, minIdx],\r\n        });\r\n        if (!animatorOn) return;\r\n      }\r\n    }\r\n\r\n    return;\r\n  },\r\n\r\n  // insertionSort: sort numbers by inserting everyone at its correct index\r\n  //    traverse array from the beginning to the end\r\n  //    for each number, traverse from the beginning to find\r\n  //    the first number which the current number is less than\r\n  //    then insert the current number at that index\r\n  //    iterate from idx 0 to numsTotal-1\r\n  insertionSort: async function ({ nums: numbers, animator }) {\r\n    let animatorOn = true;\r\n    let nums = [...numbers];\r\n\r\n    for (let curIdx = 1; curIdx < nums.length; curIdx++) {\r\n      for (let targetIdx = 0; targetIdx < curIdx; targetIdx++) {\r\n        let curNumber = nums[curIdx];\r\n        if (curNumber < nums[targetIdx]) {\r\n          // call animator, interrupt if requested\r\n          animatorOn = await animator({\r\n            toggle: true,\r\n            toggleIndices: [targetIdx],\r\n          });\r\n          if (!animatorOn) return;\r\n\r\n          for (let idx = curIdx; idx > targetIdx; idx--) {\r\n            nums[idx] = nums[idx - 1];\r\n            // call animator, interrupt if requested\r\n            animatorOn = await animator({\r\n              swap: true,\r\n              swapIndices: [idx, idx - 1],\r\n            });\r\n            if (!animatorOn) return;\r\n          }\r\n          nums[targetIdx] = curNumber;\r\n          break;\r\n        } else {\r\n          // call animator, interrupt if requested\r\n          animatorOn = await animator({\r\n            swap: false,\r\n            swapIndices: [curIdx, targetIdx],\r\n          });\r\n          if (!animatorOn) return;\r\n        }\r\n      }\r\n    }\r\n\r\n    return;\r\n  },\r\n\r\n  // cycleSort: sort numbers by putting them at their correct indices\r\n  //    for each number, its correct index = count of numbers less than it\r\n  //    keep iterating until every number is at its correct index\r\n  cycleSort: async function ({ nums: numbers, animator }) {\r\n    let animatorOn = true;\r\n    let nums = [...numbers];\r\n    let numsTotal = nums.length;\r\n\r\n    let curIdx = 0;\r\n    while (curIdx < numsTotal - 1) {\r\n      let curNum = nums[curIdx];\r\n      let numsLessTotal = -1;\r\n\r\n      while (curIdx !== numsLessTotal) {\r\n        numsLessTotal = curIdx;\r\n        for (let idx = curIdx + 1; idx < numsTotal; idx++) {\r\n          // call animator, interrupt if requested\r\n          animatorOn = await animator({\r\n            swap: false,\r\n            swapIndices: [curIdx, idx],\r\n          });\r\n          if (!animatorOn) return;\r\n\r\n          if (nums[idx] < curNum) {\r\n            numsLessTotal++;\r\n          }\r\n        }\r\n        if (curIdx !== numsLessTotal) {\r\n          while (curNum === nums[numsLessTotal] && numsLessTotal !== curIdx) {\r\n            numsLessTotal++;\r\n            // call animator, interrupt if requested\r\n            animatorOn = await animator({\r\n              swap: false,\r\n              swapIndices: [curIdx, numsLessTotal],\r\n            });\r\n            if (!animatorOn) return;\r\n          }\r\n          if (curIdx !== numsLessTotal) {\r\n            curNum = nums[numsLessTotal];\r\n            nums[numsLessTotal] = nums[curIdx] ^ nums[numsLessTotal];\r\n            nums[curIdx] = nums[curIdx] ^ nums[numsLessTotal];\r\n            nums[numsLessTotal] = nums[curIdx] ^ nums[numsLessTotal];\r\n            // call animator, interrupt if requested\r\n            animatorOn = await animator({\r\n              toggle: true,\r\n              toggleIndices: [curIdx, numsLessTotal],\r\n            });\r\n            animatorOn = await animator({\r\n              swap: true,\r\n              swapIndices: [curIdx, numsLessTotal],\r\n            });\r\n            if (!animatorOn) return;\r\n          }\r\n        }\r\n      }\r\n      nums[curIdx] = curNum;\r\n      curIdx++;\r\n    }\r\n\r\n    return;\r\n  },\r\n\r\n  // radixSort: sort numbers from LSB to MSB (decimal base)\r\n  radixSort: async function ({ nums: numbers, animator }) {\r\n    let animatorOn = true;\r\n    let nums = [...numbers];\r\n    let numsTotal = nums.length;\r\n\r\n    let divisor = 10;\r\n    let prevDivisor = 1;\r\n    let digits = [];\r\n    for (let digit = -9; digit <= 9; digit++) {\r\n      digits.push(digit);\r\n    }\r\n\r\n    let noMoreDigits = false;\r\n    while (!noMoreDigits) {\r\n      noMoreDigits = true;\r\n\r\n      // count number of appearance for each digit (-9 ~ 9)\r\n      let counts = new Array(digits.length).fill(0);\r\n      for (let idx = 0; idx < numsTotal; idx++) {\r\n        // call animator, interrupt if requested\r\n        animatorOn = await animator({\r\n          swap: false,\r\n          swapIndices: [idx],\r\n        });\r\n        if (!animatorOn) return;\r\n\r\n        let digitIdx = digits.indexOf(\r\n          ((nums[idx] % divisor) - (nums[idx] % prevDivisor)) / prevDivisor\r\n        );\r\n        counts[digitIdx]++;\r\n        if (\r\n          noMoreDigits &&\r\n          (nums[idx] % (divisor * 10)) - (nums[idx] % divisor) !== 0\r\n        ) {\r\n          noMoreDigits = false;\r\n        }\r\n      }\r\n      // find correct positions of each digit based on total counts of prev digits\r\n      for (let idx = 1; idx < counts.length; idx++) {\r\n        counts[idx] += counts[idx - 1];\r\n      }\r\n      // put numbers in their correct position in a new array\r\n      let newNums = [...nums];\r\n      for (let idx = numsTotal - 1; idx >= 0; idx--) {\r\n        let curNum = nums[idx];\r\n        let digitIdx = digits.indexOf(\r\n          ((curNum % divisor) - (curNum % prevDivisor)) / prevDivisor\r\n        );\r\n        let targetIdx = counts[digitIdx] - 1;\r\n        // call animator, interrupt if requested\r\n        animatorOn = await animator({\r\n          toggle: true,\r\n          toggleIndices: [targetIdx],\r\n          set: true,\r\n          setIndices: [targetIdx],\r\n          setHeights: [curNum],\r\n        });\r\n        if (!animatorOn) return;\r\n\r\n        newNums[targetIdx] = curNum;\r\n        counts[digitIdx]--;\r\n      }\r\n      // keep going for the next more significant bit\r\n      nums = newNums;\r\n      prevDivisor = divisor;\r\n      divisor *= 10;\r\n    }\r\n\r\n    return;\r\n  },\r\n\r\n  // mergeSort\r\n  mergeSort: async function ({ nums, range, animator, animatorOn }) {\r\n    let numsTotal = nums.length;\r\n    if (range === undefined) {\r\n      range = [0, numsTotal - 1];\r\n    }\r\n    if (animatorOn === undefined) {\r\n      animatorOn = true;\r\n    }\r\n\r\n    // base cases\r\n    if (numsTotal === 1) {\r\n      // call animator, interrupt if requested\r\n      animatorOn = await animator({\r\n        swap: false,\r\n        swapIndices: [range[0]],\r\n        set: true,\r\n        setIndices: [range[0]],\r\n        setHeights: [nums[0]],\r\n      });\r\n\r\n      return { numsSorted: nums, range, animatorOn };\r\n    }\r\n    if (numsTotal === 2) {\r\n      let swap = false;\r\n      if (nums[0] > nums[1]) {\r\n        nums.reverse();\r\n        swap = true;\r\n      }\r\n      // call animator, interrupt if requested\r\n      animatorOn = await animator({\r\n        swap,\r\n        swapIndices: range,\r\n      });\r\n\r\n      return { numsSorted: nums, range, animatorOn };\r\n    }\r\n\r\n    // recursively call mergeSort on left and right subarray\r\n    let middleIdx = Math.floor(numsTotal / 2);\r\n    let resultLeft = await this.mergeSort({\r\n      nums: nums.slice(0, middleIdx),\r\n      range: [range[0], range[0] + middleIdx - 1],\r\n      animator,\r\n    });\r\n    if (!resultLeft.animatorOn) return { animatorOn: resultLeft.animatorOn };\r\n\r\n    let resultRight = await this.mergeSort({\r\n      nums: nums.slice(middleIdx),\r\n      range: [range[0] + middleIdx, range[1]],\r\n      animator,\r\n    });\r\n    if (!resultRight.animatorOn) return { animatorOn: resultRight.animatorOn };\r\n\r\n    // merge left and right sorted subarray to a single array\r\n    let numsSortedLeft = resultLeft.numsSorted;\r\n    let numsSortedRight = resultRight.numsSorted;\r\n    let numsSorted = [];\r\n    while (numsSortedLeft.length > 0 && numsSortedRight.length > 0) {\r\n      if (numsSortedLeft[0] < numsSortedRight[0]) {\r\n        numsSorted.push(numsSortedLeft.shift());\r\n      } else {\r\n        numsSorted.push(numsSortedRight.shift());\r\n      }\r\n    }\r\n    numsSorted = [...numsSorted, ...numsSortedLeft, ...numsSortedRight];\r\n\r\n    // sorting animation\r\n    for (let idx = 0; idx < numsSorted.length; idx++) {\r\n      // call animator, interrupt if requested\r\n      animatorOn = await animator({\r\n        swap: false,\r\n        swapIndices: [range[0] + idx],\r\n        set: true,\r\n        setIndices: [range[0] + idx],\r\n        setHeights: [numsSorted[idx]],\r\n      });\r\n      if (!animatorOn) break;\r\n    }\r\n\r\n    return { numsSorted, range, animatorOn };\r\n  },\r\n\r\n  // quickSort\r\n  quickSort: async function ({ nums: numbers, range, animator, animatorOn }) {\r\n    let nums = [...numbers];\r\n    let numsTotal = nums.length;\r\n    if (range === undefined) {\r\n      range = [0, numsTotal - 1];\r\n    }\r\n    if (animatorOn === undefined) {\r\n      animatorOn = true;\r\n    }\r\n\r\n    // base case\r\n    if (numsTotal < 2) {\r\n      return { numsSorted: nums, range, animatorOn };\r\n    }\r\n    if (numsTotal === 2) {\r\n      let numsSorted = [];\r\n      let numAction = {};\r\n      if (nums[0] <= nums[1]) {\r\n        numsSorted = nums;\r\n        numAction = { swap: false, swapIndices: [range[0], range[1]] };\r\n      } else {\r\n        numsSorted = nums.reverse();\r\n        numAction = { swap: true, swapIndices: [range[0], range[1]] };\r\n      }\r\n      // call animator, interrupt if requested\r\n      animatorOn = await animator(numAction);\r\n\r\n      return { numsSorted, range, animatorOn };\r\n    }\r\n\r\n    // recursive calls\r\n    let pivotIdx = numsTotal - 1;\r\n    // call animator, interrupt if requested\r\n    animatorOn = await animator({\r\n      toggle: true,\r\n      toggleIndices: [range[0] + pivotIdx],\r\n    });\r\n    if (!animatorOn) return { animatorOn };\r\n\r\n    let numLeftIdx = 0;\r\n    let numRightIdx = pivotIdx - 1;\r\n    // call animator, interrupt if requested\r\n    animatorOn = await animator({\r\n      swap: false,\r\n      swapIndices: [range[0] + numLeftIdx, range[0] + numRightIdx],\r\n    });\r\n    if (!animatorOn) return { animatorOn };\r\n\r\n    while (numLeftIdx < numRightIdx) {\r\n      let numAction = {\r\n        swap: false,\r\n        swapIndices: [range[0] + numLeftIdx, range[0] + numRightIdx],\r\n      };\r\n      // find a number on the left that > pivot number\r\n      if (nums[numLeftIdx] <= nums[pivotIdx]) {\r\n        numLeftIdx++;\r\n        numAction.swapIndices[0]++;\r\n      }\r\n      // fing a number on the right that < pivot number\r\n      else if (nums[numRightIdx] >= nums[pivotIdx]) {\r\n        numRightIdx--;\r\n        numAction.swapIndices[1]--;\r\n      }\r\n      // swap these two numbers so that newLeft < pivotNum < newRight\r\n      else {\r\n        nums[numLeftIdx] = nums[numLeftIdx] ^ nums[numRightIdx];\r\n        nums[numRightIdx] = nums[numLeftIdx] ^ nums[numRightIdx];\r\n        nums[numLeftIdx] = nums[numLeftIdx] ^ nums[numRightIdx];\r\n        numAction.swap = true;\r\n      }\r\n      // call animator, interrupt if requested\r\n      animatorOn = await animator(numAction);\r\n      if (!animatorOn) return { animatorOn };\r\n    }\r\n    // check the number at idx = numLeftIdx = numRightIdx\r\n    let pivotNum = nums[pivotIdx];\r\n    if (nums[numLeftIdx] <= pivotNum) {\r\n      pivotIdx = numLeftIdx + 1;\r\n    } else {\r\n      pivotIdx = numLeftIdx;\r\n    }\r\n    // move pivot number to its correct position so that lefts < pivot < rights\r\n    for (let idx = numsTotal - 1; idx > pivotIdx; idx--) {\r\n      nums[idx] = nums[idx - 1];\r\n      // call animator, interrupt if requested\r\n      animatorOn = await animator({\r\n        swap: false,\r\n        swapIndices: [range[0] + idx - 1, range[0] + idx],\r\n        set: true,\r\n        setIndices: [range[0] + idx],\r\n        setHeights: [nums[idx - 1]],\r\n      });\r\n      if (!animatorOn) return { animatorOn };\r\n    }\r\n    nums[pivotIdx] = pivotNum;\r\n    // call animator, interrupt if requested\r\n    animatorOn = await animator({\r\n      toggle: true,\r\n      toggleIndices: [range[0] + pivotIdx],\r\n      set: true,\r\n      setIndices: [range[0] + pivotIdx],\r\n      setHeights: [pivotNum],\r\n    });\r\n    if (!animatorOn) return { animatorOn };\r\n\r\n    // recusive calls on left and right subarrays\r\n    let resultLeft = await this.quickSort({\r\n      nums: nums.slice(0, pivotIdx),\r\n      range: [range[0], range[0] + pivotIdx - 1],\r\n      animator,\r\n      animatorOn,\r\n    });\r\n    if (!resultLeft.animatorOn) return { animatorOn };\r\n    let numsSortedLeft = resultLeft.numsSorted;\r\n\r\n    let resultRight = await this.quickSort({\r\n      nums: nums.slice(pivotIdx + 1, numsTotal),\r\n      range: [range[0] + pivotIdx + 1, range[1]],\r\n      animator,\r\n      animatorOn,\r\n    });\r\n    if (!resultRight.animatorOn) return { animatorOn };\r\n    let numsSortedRight = resultRight.numsSorted;\r\n\r\n    nums = [...numsSortedLeft, pivotNum, ...numsSortedRight];\r\n\r\n    return {\r\n      numsSorted: nums,\r\n      range,\r\n      animatorOn,\r\n    };\r\n  },\r\n};\r\n\r\nexport default sortingAlgos;\r\n","import sortingAlgos from \"./sortingAlgos\";\r\n\r\nconst buttons = {\r\n  sortingAlgoNames: Object.keys(sortingAlgos),\r\n  settings: [\"speed\", \"numsTotal\", \"sortingAlgo\"],\r\n  disableSettingButtons: function (disable) {\r\n    this.settings.forEach((setting) => {\r\n      let buttonName = `set${setting[0].toUpperCase()}${setting.substr(1)}`;\r\n      document.querySelector(`#button-${buttonName}`).disabled = disable;\r\n      document.querySelector(`#input-${setting}`).disabled = disable;\r\n    });\r\n  },\r\n  reloadSettings: function () {\r\n    this.settings.forEach((setting) => {\r\n      if (setting !== \"sortingAlgo\")\r\n        document.querySelector(`#input-${setting}`).value = \"\";\r\n    });\r\n  },\r\n};\r\n\r\nexport default buttons;\r\n","import numBarsConstants from \"../constants/numBarsConstants\";\r\n\r\nconst { colorBlue, NUMBER_MAX, NUMBER_MIN, CANVAS_HEIGHT } = numBarsConstants;\r\n\r\nconst numBars = {\r\n  setBarColor: function (idx, color) {\r\n    document.querySelector(`#number${idx}`).style.backgroundColor = color;\r\n  },\r\n  toggleBarColor: function (idx, targetColor) {\r\n    if (\r\n      document.querySelector(`#number${idx}`).style.backgroundColor !==\r\n      colorBlue\r\n    ) {\r\n      this.setBarColor(idx, colorBlue);\r\n    } else {\r\n      this.setBarColor(idx, targetColor);\r\n    }\r\n  },\r\n  setBarHeight: function (idx, height) {\r\n    let barStyle = document.querySelector(`#number${idx}`).style;\r\n    //console.log(\"target bar idx\", idx);\r\n    //console.log(\"target bar original height\", barStyle.height);\r\n    //console.log(\"target bar target height\", height);\r\n    barStyle.height = `${height}px`;\r\n    barStyle.borderTopWidth = `${CANVAS_HEIGHT - height}px`;\r\n  },\r\n  resetNumbers: function (numsTotal) {\r\n    let numBarElements = document.querySelectorAll(\".number-bar\");\r\n    numBarElements.forEach((numBar) => {\r\n      if (numBar.style.backgroundColor !== colorBlue) {\r\n        numBar.style.backgroundColor = colorBlue;\r\n      }\r\n    });\r\n    document.querySelector(\"#button-start\").disabled = true;\r\n\r\n    console.log(CANVAS_HEIGHT, NUMBER_MAX, NUMBER_MIN);\r\n    let newNumbers = [];\r\n    for (let i = 0; i < numsTotal; i++) {\r\n      let newNumber = Math.floor(\r\n        Math.random() * (NUMBER_MAX - NUMBER_MIN) + NUMBER_MIN\r\n      );\r\n      newNumbers.push(newNumber);\r\n    }\r\n    //setNumbers(newNumbers)\r\n    //setSortingAlgo(\"\")\r\n    // buttons.disableSettingButtons(false)\r\n\r\n    return newNumbers;\r\n  },\r\n};\r\n\r\nexport default numBars;\r\n","import numBars from \"./numBars\";\r\nimport buttons from \"./buttons\";\r\nimport sortingAlgos from \"./sortingAlgos\";\r\nimport numBarsConstants from \"../constants/numBarsConstants\";\r\n\r\nclass Animator {\r\n  constructor() {\r\n    this.animatorOn = false;\r\n    this.constants = numBarsConstants;\r\n    this.numbers = [];\r\n    this.speed = 25;\r\n  }\r\n\r\n  // setter methods\r\n  setAnimatorOn = (animatorOn) => {\r\n    this.animatorOn = animatorOn;\r\n  };\r\n  setNumbers = (newNumbers) => {\r\n    this.numbers = newNumbers;\r\n  };\r\n  setSpeed = (newSpeed) => {\r\n    this.speed = newSpeed;\r\n  };\r\n\r\n  // animator control functions\r\n  start = async (algo) => {\r\n    buttons.disableSettingButtons(true);\r\n    buttons.reloadSettings();\r\n    this.setAnimatorOn(true);\r\n    let animator = this.animator();\r\n    await sortingAlgos[algo]({ nums: this.numbers, animator });\r\n    // finish animation by giving a null as final action\r\n    animator(null);\r\n  };\r\n  stop = () => {\r\n    this.setAnimatorOn(false);\r\n    // setSortingAlgo(\"\")\r\n    buttons.disableSettingButtons(false);\r\n  };\r\n\r\n  // animator function, use closure to remember lastAction state\r\n  animator = () => {\r\n    let lastAction = {};\r\n\r\n    return async (action) => {\r\n      if (lastAction.swap !== undefined) {\r\n        for (let idx of lastAction.swapIndices) {\r\n          numBars.setBarColor(idx, this.constants.colorBlue);\r\n        }\r\n      } else if (lastAction.set !== undefined) {\r\n        for (let idx of lastAction.setIndices) {\r\n          numBars.setBarColor(idx, this.constants.colorBlue);\r\n        }\r\n      }\r\n      // if no further action, stop animation and reset buttons\r\n      if (action === null) {\r\n        this.stop();\r\n        return;\r\n      }\r\n      // swap numbers if requested\r\n      if (action.swap !== undefined) {\r\n        let indices = action.swapIndices;\r\n        for (let idx of indices) {\r\n          numBars.setBarColor(idx, this.constants.colorOrange);\r\n        }\r\n        if (action.swap) {\r\n          let height1 = this.numbers[indices[0]];\r\n          let height2 = this.numbers[indices[1]];\r\n          numBars.setBarHeight(indices[0], height2);\r\n          numBars.setBarHeight(indices[1], height1);\r\n          this.numbers[indices[0]] = height2;\r\n          this.numbers[indices[1]] = height1;\r\n        }\r\n      }\r\n      // set target numbers if requested\r\n      if (action.set !== undefined) {\r\n        let indices = action.setIndices;\r\n        let heights = action.setHeights;\r\n        for (let idx = 0; idx < indices.length; idx++) {\r\n          numBars.setBarHeight(indices[idx], heights[idx]);\r\n          //numBars.setBarColor(indices[idx], colorOrange);\r\n          this.numbers[indices[idx]] = heights[idx];\r\n        }\r\n      }\r\n      // highlight target numbers if requested\r\n      if (action.toggle !== undefined) {\r\n        let indices = action.toggleIndices;\r\n        for (let idx of indices) {\r\n          numBars.toggleBarColor(idx, this.constants.colorViolet);\r\n        }\r\n      }\r\n      lastAction = action;\r\n\r\n      // return a promise that resolves after some time\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve(this.animatorOn);\r\n        }, this.speed);\r\n      });\r\n    };\r\n  };\r\n}\r\n\r\nexport default Animator;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./css/App.css\";\n// components\nimport Numbers from \"./components/Numbers\";\nimport Buttons from \"./components/Buttons\";\nimport Messages from \"./components/Messages\";\n// utils\nimport buttons from \"./utils/buttons\";\nimport numBars from \"./utils/numBars\";\nimport Animator from \"./utils/animator\";\n\nfunction App() {\n  // state values\n  const [numbers, setNumbers] = useState([]);\n  const [numsTotal, setNumsTotal] = useState(100);\n  const [sortingAlgo, setSortingAlgo] = useState(\"\");\n  const [speed, setSpeed] = useState(25);\n\n  // animator object\n  const animator = new Animator();\n\n  // reset everything at start up and whenever numsTotal changes\n  useEffect(() => {\n    let newNumbers = numBars.resetNumbers(numsTotal);\n    setNumbers(newNumbers);\n    setSortingAlgo(\"\");\n    buttons.disableSettingButtons(false);\n  }, [numsTotal]);\n\n  // event handlers\n  const handlers = {\n    refresh: (sorted = false) => {\n      let newNumbers = numBars.resetNumbers(numsTotal);\n      if (sorted) {\n        newNumbers.sort((a, b) => a - b);\n      }\n      setNumbers(newNumbers);\n      animator.stop();\n      animator.setNumbers(newNumbers);\n      setSortingAlgo(\"\");\n      buttons.disableSettingButtons(false);\n    },\n    setSpeed: () => {\n      let value = document.querySelector(\"#input-speed\").value;\n      if (value > 0) {\n        setSpeed(value);\n      } else {\n        alert(\"Please enter a number greater than 0\");\n      }\n      animator.setSpeed(value);\n      buttons.reloadSettings();\n    },\n    setNumsTotal: () => {\n      let value = document.querySelector(\"#input-numsTotal\").value;\n      let numsTotalMax = Math.floor((window.innerWidth - 40) / 7);\n      if (value > 0 && value <= numsTotalMax) {\n        setNumsTotal(value);\n      } else {\n        alert(`Please enter a number between 0 ~ ${numsTotalMax}`);\n      }\n      buttons.reloadSettings();\n    },\n    setSortingAlgo: () => {\n      setSortingAlgo(document.querySelector(\"#input-sortingAlgo\").value);\n      document.querySelector(\"#button-start\").disabled = false;\n    },\n    start: () => {\n      animator.setSpeed(speed);\n      animator.setNumbers(numbers);\n      animator.start(sortingAlgo);\n    },\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"title-container\">\n        <p className=\"title-h1\">Sorting Algorithms Visualizer</p>\n        <p className=\"title-h2\">github/allenfeng2014</p>\n      </div>\n      <Numbers {...{ numbers }} />\n      <Buttons\n        {...{\n          speed,\n          numsTotal,\n          sortingAlgoNames: buttons.sortingAlgoNames,\n          handlers,\n        }}\n      />\n      <Messages {...{ speed, sortingAlgo, numsTotal }} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}