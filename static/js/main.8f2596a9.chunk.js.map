{"version":3,"sources":["sortingAlgos.js","Numbers.js","App.js","index.js"],"names":["sortingAlgos","bubbleSort","nums","numActions","numbers","swapped","i","length","numAction","swapIndices","swap","num1","num2","push","selectionSort","curIdx","curNumber","minIdx","minNumber","idx","numBarsToggle","toggleIndices","insertionSort","targetIdx","mergeSort","range","numsTotal","actions","set","setIndices","setHeights","numsSorted","reverse","medianIdx","Math","floor","this","slice","numsSortedLeft","actionsLeft","numsSortedRight","actionsRight","concat","numLeftIdx","numRightIdx","numLeft","numRight","Numbers","useState","setNumbers","numbersTotal","sortingAlgo","setSortingAlgo","animeSpeed","animeProgressID","colorOrange","colorBlue","resetNumbers","clearInterval","barStyle","document","getElementById","style","backgroundColor","disabled","newNumbers","newNumber","random","setBarColor","color","toggleBarColor","targetColor","setBarHeight","height","borderTopWidth","useEffect","id","map","number","className","borderTop","width","onClick","algo","lastAction","setInterval","action","shift","console","log","undefined","indices","height1","height2","heights","sortingAnime","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.8f2596a9.chunk.js","sourcesContent":["const sortingAlgos = {\r\n  bubbleSort: function (nums) {\r\n    let numActions = [];\r\n    let numbers = [...nums];\r\n    let swapped = true;\r\n\r\n    while (swapped) {\r\n      swapped = false;\r\n      for (let i = 0; i < numbers.length - 1; i++) {\r\n        let numAction = { swapIndices: [i, i + 1], swap: false };\r\n        let num1 = numbers[i];\r\n        let num2 = numbers[i + 1];\r\n        if (num1 > num2) {\r\n          numbers[i] = num2;\r\n          numbers[i + 1] = num1;\r\n          swapped = true;\r\n          numAction.swap = true;\r\n        }\r\n        numActions.push(numAction);\r\n      }\r\n    }\r\n\r\n    return { numActions };\r\n  },\r\n\r\n  selectionSort: function (nums) {\r\n    let numActions = [];\r\n    let numbers = [...nums];\r\n\r\n    for (let curIdx = 0; curIdx < numbers.length - 1; curIdx++) {\r\n      let curNumber = numbers[curIdx];\r\n      let minIdx = curIdx;\r\n      let minNumber = curNumber;\r\n      for (let idx = curIdx + 1; idx < numbers.length; idx++) {\r\n        numActions.push({ swapIndices: [curIdx, idx], swap: false });\r\n        if (numbers[idx] < minNumber) {\r\n          if (minIdx !== curIdx) {\r\n            numActions.push({\r\n              swapIndices: [curIdx],\r\n              swap: false,\r\n              numBarsToggle: true,\r\n              toggleIndices: [minIdx],\r\n            });\r\n          }\r\n          numActions.push({\r\n            swapIndices: [curIdx],\r\n            swap: false,\r\n            numBarsToggle: true,\r\n            toggleIndices: [idx],\r\n          });\r\n          minIdx = idx;\r\n          minNumber = numbers[idx];\r\n        }\r\n      }\r\n      if (minIdx !== curIdx) {\r\n        numbers[curIdx] = numbers[minIdx];\r\n        numbers[minIdx] = curNumber;\r\n        numActions.push({ swapIndices: [curIdx, minIdx], swap: true });\r\n      }\r\n    }\r\n\r\n    return { numActions };\r\n  },\r\n\r\n  insertionSort: function (nums) {\r\n    let numActions = [];\r\n    let numbers = [...nums];\r\n\r\n    for (let curIdx = 1; curIdx < numbers.length; curIdx++) {\r\n      for (let targetIdx = 0; targetIdx < curIdx; targetIdx++) {\r\n        let curNumber = numbers[curIdx];\r\n        if (curNumber < numbers[targetIdx]) {\r\n          numActions.push({\r\n            toggleIndices: [targetIdx],\r\n            numBarsToggle: true,\r\n          });\r\n          for (let idx = curIdx; idx > targetIdx; idx--) {\r\n            numbers[idx] = numbers[idx - 1];\r\n            numActions.push({ swapIndices: [idx, idx - 1], swap: true });\r\n          }\r\n          numbers[targetIdx] = curNumber;\r\n          break;\r\n        } else {\r\n          numActions.push({ swapIndices: [curIdx, targetIdx], swap: false });\r\n        }\r\n      }\r\n    }\r\n\r\n    return { numActions };\r\n  },\r\n\r\n  mergeSort: function (\r\n    numbers,\r\n    range = [0, numbers.length - 1],\r\n    numActions = []\r\n  ) {\r\n    let numsTotal = numbers.length;\r\n    let actions = [];\r\n\r\n    // base cases\r\n    if (numsTotal === 1) {\r\n      actions.push({ set: true, setIndices: [range[0]], setHeights: numbers });\r\n      return { numsSorted: numbers, range: [range[0]], numActions: [] };\r\n    }\r\n    if (numsTotal === 2) {\r\n      if (numbers[0] > numbers[1]) {\r\n        numbers = numbers.reverse();\r\n      }\r\n      for (let idx = 0; idx < numsTotal; idx++) {\r\n        actions.push({\r\n          set: true,\r\n          setIndices: [range[0] + idx],\r\n          setHeights: [numbers[idx]],\r\n        });\r\n      }\r\n      return { numsSorted: numbers, range, numActions: actions };\r\n    }\r\n\r\n    // recursively call mergeSort on left and right subarray\r\n    let medianIdx = Math.floor(numsTotal / 2);\r\n    let {\r\n      numsSorted: numsSortedLeft,\r\n      numActions: actionsLeft,\r\n    } = this.mergeSort(numbers.slice(0, medianIdx), [\r\n      range[0],\r\n      range[0] + medianIdx - 1,\r\n    ]);\r\n    let {\r\n      numsSorted: numsSortedRight,\r\n      numActions: actionsRight,\r\n    } = this.mergeSort(numbers.slice(medianIdx), [\r\n      range[0] + medianIdx,\r\n      range[1],\r\n    ]);\r\n    // store sorting actions returned by mergeSort on subarrays\r\n    numActions = numActions.concat([...actionsLeft, ...actionsRight]);\r\n\r\n    // merge left and right sorted subarray to a single array\r\n    let numLeftIdx = 0;\r\n    let numRightIdx = 0;\r\n    let numsSorted = [];\r\n    // put numbers from two subarrays into one array\r\n    while (\r\n      numLeftIdx < numsSortedLeft.length &&\r\n      numRightIdx < numsSortedRight.length\r\n    ) {\r\n      let numLeft = numsSortedLeft[numLeftIdx];\r\n      let numRight = numsSortedRight[numRightIdx];\r\n      if (numLeft < numRight) {\r\n        numsSorted.push(numLeft);\r\n        numLeftIdx++;\r\n      } else {\r\n        numsSorted.push(numRight);\r\n        numRightIdx++;\r\n      }\r\n    }\r\n    if (numLeftIdx < numsSortedLeft.length) {\r\n      for (let idx = numLeftIdx; idx < numsSortedLeft.length; idx++) {\r\n        numsSorted.push(numsSortedLeft[idx]);\r\n      }\r\n    } else {\r\n      for (let idx = numRightIdx; idx < numsSortedRight.length; idx++) {\r\n        numsSorted.push(numsSortedRight[idx]);\r\n      }\r\n    }\r\n    // return sorting actions for animation\r\n    for (let idx = 0; idx < numsSorted.length; idx++) {\r\n      numActions.push({\r\n        set: true,\r\n        setIndices: [range[0] + idx],\r\n        setHeights: [numsSorted[idx]],\r\n      });\r\n    }\r\n\r\n    return { numsSorted, range, numActions };\r\n  },\r\n};\r\n\r\nexport default sortingAlgos;\r\n","import { useState, useEffect } from \"react\";\r\nimport \"./css/Numbers.css\";\r\nimport sortingAlgos from \"./sortingAlgos\";\r\n\r\nfunction Numbers() {\r\n  // state values\r\n  const [numbers, setNumbers] = useState([]);\r\n  const [numbersTotal, setNumbersTotal] = useState(200);\r\n  const [sortingAlgo, setSortingAlgo] = useState(\" \");\r\n  const [animeSpeed, setAnimeSpeed] = useState(30);\r\n  let animeProgressID = null;\r\n\r\n  // color codes\r\n  const colorOrange = \"rgb(247, 116, 45)\";\r\n  const colorBlue = \"rgb(49, 109, 165)\";\r\n  const colorGrey = \"rgb(224, 224, 224)\";\r\n  const colorViolet = \"rgb(220, 58, 252)\";\r\n\r\n  // function for resetting numbers\r\n  const resetNumbers = () => {\r\n    if (animeProgressID !== null) {\r\n      clearInterval(animeProgressID);\r\n      animeProgressID = null;\r\n      for (let i = 0; i < numbersTotal; i++) {\r\n        let barStyle = document.getElementById(`number${i}`).style;\r\n        if (barStyle.backgroundColor === colorBlue) {\r\n          continue;\r\n        }\r\n        barStyle.backgroundColor = colorBlue;\r\n      }\r\n    }\r\n    document.getElementById(\"button-start\").disabled = true;\r\n\r\n    let newNumbers = [];\r\n    for (let i = 0; i < numbersTotal; i++) {\r\n      let newNumber = Math.floor(Math.random() * 795 + 5);\r\n      newNumbers.push(newNumber);\r\n    }\r\n    setNumbers(newNumbers);\r\n  };\r\n\r\n  // function for changing number bar color\r\n  const setBarColor = (idx, color) => {\r\n    document.getElementById(`number${idx}`).style.backgroundColor = color;\r\n  };\r\n\r\n  // function for toggling number bar between blue and target color\r\n  const toggleBarColor = (idx, targetColor) => {\r\n    if (\r\n      document.getElementById(`number${idx}`).style.backgroundColor !==\r\n      colorBlue\r\n    ) {\r\n      setBarColor(idx, colorBlue);\r\n    } else {\r\n      setBarColor(idx, targetColor);\r\n    }\r\n  };\r\n\r\n  // function for changing number bar height\r\n  const setBarHeight = (idx, height) => {\r\n    let barStyle = document.getElementById(`number${idx}`).style;\r\n    barStyle.height = `${height}px`;\r\n    barStyle.borderTopWidth = `${900 - height}px`;\r\n  };\r\n\r\n  // function for visualizing bubble sort\r\n  const sortingAnime = (nums, algo) => {\r\n    let { numActions: actions } = sortingAlgos[algo](nums);\r\n    let lastAction = actions[0];\r\n    animeProgressID = setInterval(() => {\r\n      let action = actions.shift();\r\n      console.log(action); //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!debugger\r\n      if (lastAction.swap !== undefined) {\r\n        for (let idx of lastAction.swapIndices) {\r\n          setBarColor(idx, colorBlue);\r\n        }\r\n      } else if (lastAction.set !== undefined) {\r\n        for (let idx of lastAction.setIndices) {\r\n          setBarColor(idx, colorBlue);\r\n        }\r\n      }\r\n      if (action === undefined) {\r\n        clearInterval(animeProgressID);\r\n        animeProgressID = null;\r\n        return;\r\n      }\r\n\r\n      // swap numbers if requested\r\n      if (action.swap !== undefined) {\r\n        let indices = action.swapIndices;\r\n        for (let idx of indices) {\r\n          setBarColor(idx, colorOrange);\r\n        }\r\n        if (action.swap) {\r\n          let height1 = numbers[indices[0]];\r\n          let height2 = numbers[indices[1]];\r\n          setBarHeight(indices[0], height2);\r\n          setBarHeight(indices[1], height1);\r\n          numbers[indices[0]] = height2;\r\n          numbers[indices[1]] = height1;\r\n        }\r\n      }\r\n      // set target numbers if requested\r\n      if (action.set !== undefined) {\r\n        let indices = action.setIndices;\r\n        let heights = action.setHeights;\r\n        for (let idx = 0; idx < indices.length; idx++) {\r\n          setBarHeight(indices[idx], heights[idx]);\r\n          setBarColor(indices[idx], colorOrange);\r\n          numbers[indices[idx]] = heights[idx];\r\n        }\r\n      }\r\n      // highlight target numbers if requested\r\n      if (action.numBarsToggle !== undefined) {\r\n        let indices = action.toggleIndices;\r\n        for (let idx of indices) {\r\n          toggleBarColor(idx, colorViolet);\r\n        }\r\n      }\r\n      lastAction = action;\r\n    }, animeSpeed);\r\n    document.getElementById(\"button-start\").disabled = true;\r\n  };\r\n\r\n  // reset numbers at start up\r\n  useEffect(() => {\r\n    resetNumbers();\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"visualizer-container\">\r\n      <div id=\"numbers-container\">\r\n        {numbers.map((number, idx) => (\r\n          <span\r\n            className=\"number-bar\"\r\n            id={`number${idx}`}\r\n            key={idx}\r\n            style={{\r\n              height: `${number}px`,\r\n              borderTop: `${900 - number}px solid ${colorGrey}`,\r\n            }}\r\n          ></span>\r\n        ))}\r\n      </div>\r\n      <div id=\"buttons-container\">\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-refresh\"\r\n          style={{\r\n            width: \"50px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={resetNumbers}\r\n        >\r\n          Refresh\r\n        </button>\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-bubbleSort\"\r\n          style={{\r\n            width: \"100px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            setSortingAlgo(\"bubbleSort\");\r\n            document.getElementById(\"button-start\").disabled = false;\r\n          }}\r\n        >\r\n          Bubble Sort\r\n        </button>\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-insertionSort\"\r\n          style={{\r\n            width: \"100px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            setSortingAlgo(\"insertionSort\");\r\n            document.getElementById(\"button-start\").disabled = false;\r\n          }}\r\n        >\r\n          Insertion Sort\r\n        </button>\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-selectionSort\"\r\n          style={{\r\n            width: \"100px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            setSortingAlgo(\"selectionSort\");\r\n            document.getElementById(\"button-start\").disabled = false;\r\n          }}\r\n        >\r\n          Selection Sort\r\n        </button>\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-mergeSort\"\r\n          style={{\r\n            width: \"100px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            setSortingAlgo(\"mergeSort\");\r\n            document.getElementById(\"button-start\").disabled = false;\r\n          }}\r\n        >\r\n          Merge Sort\r\n        </button>\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-start\"\r\n          style={{\r\n            width: \"50px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            sortingAnime(numbers, sortingAlgo);\r\n          }}\r\n        >\r\n          Start\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Numbers;\r\n","import Numbers from \"./Numbers\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Numbers />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}