{"version":3,"sources":["components/Numbers.jsx","components/Buttons.jsx","components/Messages.jsx","constants/numBarsConstants.js","sortingAlgos.js","utils/buttons.js","utils/numBars.js","utils/animator.js","App.js","index.js"],"names":["Numbers","numbers","CANVAS_HEIGHT","colorGrey","className","map","number","idx","id","style","height","borderTop","Buttons","speed","numsTotal","sortingAlgoNames","handlers","onClick","refresh","placeholder","setSpeed","setNumsTotal","algoName","value","setSortingAlgo","start","Messages","sortingAlgo","numBarsConstants","colorOrange","colorBlue","colorViolet","NUMBER_MAX","NUMBER_MIN","sortingAlgos","bubbleSort","numActions","nums","swapped","i","length","numAction","swap","swapIndices","num1","num2","push","numsSorted","oddEvenSort","prevRunSorted","curRunSorted","startIdx","toggleIndices","toggle","selectionSort","curIdx","curNumber","minIdx","minNumber","insertionSort","targetIdx","cycleSort","curNum","numsLessTotal","radixSort","divisor","prevDivisor","digits","digit","noMoreDigits","counts","Array","fill","indexOf","newNums","digitIdx","set","setIndices","setHeights","mergeSort","range","actions","reverse","middleIdx","Math","floor","this","slice","numsSortedLeft","actionsLeft","numsSortedRight","actionsRight","concat","numLeftIdx","numRightIdx","numLeft","numRight","quickSort","pivotIdx","pivotNum","obj","buttons","Object","keys","settings","disableSettingButtons","disable","forEach","setting","buttonName","toUpperCase","substr","document","querySelector","disabled","reloadSettings","numBars","setBarColor","color","backgroundColor","toggleBarColor","targetColor","setBarHeight","barStyle","borderTopWidth","resetNumbers","returnNumbers","numBarElements","querySelectorAll","numBar","newNumbers","newNumber","random","Animator","setAnimeProgressID","newProgressID","animeProgressID","setNumbers","newSpeed","algo","sortingAnime","stop","clearInterval","lastAction","setInterval","action","shift","undefined","constants","indices","height1","height2","heights","App","useState","animator","useEffect","sorted","sort","a","b","alert","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.31c10f45.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/Numbers.css\";\r\n\r\nfunction Numbers({ numbers, CANVAS_HEIGHT, colorGrey }) {\r\n  return (\r\n    <div className=\"numbers-container\">\r\n      {numbers.map((number, idx) => (\r\n        <span\r\n          className=\"number-bar\"\r\n          id={`number${idx}`}\r\n          key={idx}\r\n          style={{\r\n            height: `${number}px`,\r\n            borderTop: `${CANVAS_HEIGHT - number}px solid ${colorGrey}`,\r\n          }}\r\n        ></span>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Numbers;\r\n","import React from \"react\";\r\nimport \"../css/Buttons.css\";\r\n\r\nfunction Buttons({ speed, numsTotal, sortingAlgoNames, handlers }) {\r\n  return (\r\n    <div className=\"buttons-container\">\r\n      <button\r\n        className=\"button-misc\"\r\n        id=\"button-sortedRefresh\"\r\n        onClick={() => {\r\n          handlers.refresh(true);\r\n        }}\r\n      >\r\n        Sorted Refresh\r\n      </button>\r\n      <button\r\n        className=\"button-misc\"\r\n        id=\"button-refresh\"\r\n        onClick={() => {\r\n          handlers.refresh(false);\r\n        }}\r\n      >\r\n        Refresh\r\n      </button>\r\n\r\n      {/*change textarea to input maybe ???*/}\r\n      <textarea\r\n        className=\"textarea-setting\"\r\n        id=\"input-speed\"\r\n        placeholder={`${speed} ms`}\r\n      ></textarea>\r\n      <button\r\n        className=\"button-misc\"\r\n        id=\"button-setSpeed\"\r\n        onClick={handlers.setSpeed}\r\n      >\r\n        SetSpeed\r\n      </button>\r\n      <textarea\r\n        className=\"textarea-setting\"\r\n        id=\"input-numsTotal\"\r\n        placeholder={numsTotal}\r\n      ></textarea>\r\n      <button\r\n        className=\"button-misc\"\r\n        id=\"button-setNumsTotal\"\r\n        onClick={handlers.setNumsTotal}\r\n      >\r\n        SetNumsTotal\r\n      </button>\r\n      <select id=\"input-sortingAlgo\">\r\n        {sortingAlgoNames.map((algoName, idx) => (\r\n          <option value={algoName} key={idx}>\r\n            {algoName}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button\r\n        className=\"button-misc\"\r\n        id=\"button-setSortingAlgo\"\r\n        onClick={handlers.setSortingAlgo}\r\n      >\r\n        SetAlgorithm\r\n      </button>\r\n\r\n      <button\r\n        className=\"button-misc\"\r\n        id=\"button-start\"\r\n        onClick={handlers.start}\r\n      >\r\n        Start\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"../css/Messages.css\";\r\n\r\nfunction Messages({ speed, sortingAlgo, numsTotal }) {\r\n  return (\r\n    <div className=\"messages-container\">\r\n      <span className=\"message-block\" id=\"message-refresh\">\r\n        Generate new numbers\r\n      </span>\r\n      <span className=\"message-block\" id=\"message-settings\">\r\n        Animation settings:\r\n        <b>{`${speed} ms/frame, ${numsTotal} nums`}</b>\r\n      </span>\r\n      <span className=\"message-block\" id=\"message-algo\">\r\n        {sortingAlgo ? (\r\n          <span>\r\n            Algorithm: <b>{sortingAlgo}</b>\r\n          </span>\r\n        ) : (\r\n          <b>Pick an algorithm !!!!!</b>\r\n        )}\r\n      </span>\r\n      <span className=\"message-block\" id=\"message-start\">\r\n        Start\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Messages;\r\n","const numBarsConstants = {\r\n  // color codes\r\n  colorOrange: \"rgb(247, 116, 45)\",\r\n  colorBlue: \"rgb(49, 109, 165)\",\r\n  colorGrey: \"rgb(224, 224, 224)\",\r\n  colorViolet: \"rgb(220, 58, 252)\",\r\n  // design related constants\r\n  NUMBER_MAX: 690,\r\n  NUMBER_MIN: 10,\r\n  CANVAS_HEIGHT: 700, // NUMBER_MAX + NUMBER_MIN\r\n};\r\n\r\nexport default numBarsConstants;\r\n","/*\r\nsorting algorithms included:\r\n  bubbleSort, oddEvenSort, selectionSort, insertionSort,\r\n  mergeSort, quickSort, cycleSort, radixSort\r\n\r\nparameters:\r\n  numbers: array of unsorted numbers\r\n  range: range of current subarray (for recursive algos)\r\n        format [startIdx, endIdx]\r\n  numActions: swap/toggle/set actions on numbers for animation\r\n            format {\r\n              swap: bool,\r\n              swapIndices: [],\r\n              toggle: bool,\r\n              toggleIndices: [],\r\n              set: bool,\r\n              setIndices: [],\r\n              setHeights: []\r\n            }\r\n*/\r\nconst sortingAlgos = {\r\n  // bubbleSort: sort numbers by swapping unsorted adjacent numbers\r\n  //    traverse from the beginning to the end\r\n  //    check if two adjacent numbers are sorted (num1 <= num2)\r\n  //    if unsorted, swap them\r\n  //    keep iterating until no swap is needed for the entire array\r\n  bubbleSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n    let swapped = true;\r\n\r\n    while (swapped) {\r\n      swapped = false;\r\n      for (let i = 0; i < nums.length - 1; i++) {\r\n        let numAction = { swap: false, swapIndices: [i, i + 1] };\r\n        let num1 = nums[i];\r\n        let num2 = nums[i + 1];\r\n        if (num1 > num2) {\r\n          nums[i] = num2;\r\n          nums[i + 1] = num1;\r\n          swapped = true;\r\n          numAction.swap = true;\r\n        }\r\n        numActions.push(numAction);\r\n      }\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  oddEvenSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n    let prevRunSorted = false;\r\n    let curRunSorted = false;\r\n\r\n    let startIdx = 1;\r\n    let toggleIndices = [];\r\n    while (!prevRunSorted || !curRunSorted) {\r\n      prevRunSorted = curRunSorted;\r\n      curRunSorted = true;\r\n      toggleIndices = [];\r\n      for (let idx = startIdx; idx < nums.length - 1; idx += 2) {\r\n        toggleIndices.push(idx);\r\n      }\r\n      numActions.push({\r\n        toggle: true,\r\n        toggleIndices,\r\n      });\r\n      for (let idx = startIdx; idx < nums.length - 1; idx += 2) {\r\n        let numAction = { swap: false, swapIndices: [idx, idx + 1] };\r\n        if (nums[idx] > nums[idx + 1]) {\r\n          curRunSorted = false;\r\n          nums[idx] = nums[idx] ^ nums[idx + 1];\r\n          nums[idx + 1] = nums[idx] ^ nums[idx + 1];\r\n          nums[idx] = nums[idx] ^ nums[idx + 1];\r\n          numAction.swap = true;\r\n        }\r\n        numActions.push(numAction);\r\n      }\r\n      // toggle odd/even mode\r\n      startIdx = 1 - startIdx;\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  selectionSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n\r\n    for (let curIdx = 0; curIdx < nums.length - 1; curIdx++) {\r\n      let curNumber = nums[curIdx];\r\n      let minIdx = curIdx;\r\n      let minNumber = curNumber;\r\n      for (let idx = curIdx + 1; idx < nums.length; idx++) {\r\n        numActions.push({ swap: false, swapIndices: [curIdx, idx] });\r\n        if (nums[idx] < minNumber) {\r\n          if (minIdx !== curIdx) {\r\n            numActions.push({\r\n              swap: false,\r\n              swapIndices: [curIdx],\r\n              toggle: true,\r\n              toggleIndices: [minIdx],\r\n            });\r\n          }\r\n          numActions.push({\r\n            swap: false,\r\n            swapIndices: [curIdx],\r\n            toggle: true,\r\n            toggleIndices: [idx],\r\n          });\r\n          minIdx = idx;\r\n          minNumber = nums[idx];\r\n        }\r\n      }\r\n      if (minIdx !== curIdx) {\r\n        nums[curIdx] = nums[minIdx];\r\n        nums[minIdx] = curNumber;\r\n        numActions.push({ swap: true, swapIndices: [curIdx, minIdx] });\r\n      }\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  // insertionSort: sort numbers by inserting everyone at its correct index\r\n  //    traverse array from the beginning to the end\r\n  //    for each number, traverse from the beginning to find\r\n  //    the first number which the current number is less than\r\n  //    then insert the current number at that index\r\n  //    iterate from idx 0 to length-1\r\n  insertionSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n\r\n    for (let curIdx = 1; curIdx < nums.length; curIdx++) {\r\n      for (let targetIdx = 0; targetIdx < curIdx; targetIdx++) {\r\n        let curNumber = nums[curIdx];\r\n        if (curNumber < nums[targetIdx]) {\r\n          numActions.push({\r\n            toggle: true,\r\n            toggleIndices: [targetIdx],\r\n          });\r\n          for (let idx = curIdx; idx > targetIdx; idx--) {\r\n            nums[idx] = nums[idx - 1];\r\n            numActions.push({ swap: true, swapIndices: [idx, idx - 1] });\r\n          }\r\n          nums[targetIdx] = curNumber;\r\n          break;\r\n        } else {\r\n          numActions.push({ swap: false, swapIndices: [curIdx, targetIdx] });\r\n        }\r\n      }\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  // cycleSort: sort numbers by putting them at their correct indices\r\n  //    for each number, its correct index = count of numbers less than it\r\n  //    keep iterating until every number is at its correct index\r\n  cycleSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n    let length = nums.length;\r\n\r\n    let curIdx = 0;\r\n    while (curIdx < length - 1) {\r\n      let curNum = nums[curIdx];\r\n      let numsLessTotal = -1;\r\n\r\n      while (curIdx !== numsLessTotal) {\r\n        numsLessTotal = curIdx;\r\n        for (let idx = curIdx + 1; idx < length; idx++) {\r\n          numActions.push({ swap: false, swapIndices: [curIdx, idx] });\r\n          if (nums[idx] < curNum) {\r\n            numsLessTotal++;\r\n          }\r\n        }\r\n        if (curIdx !== numsLessTotal) {\r\n          while (curNum === nums[numsLessTotal] && numsLessTotal !== curIdx) {\r\n            numsLessTotal++;\r\n            numActions.push({\r\n              swap: false,\r\n              swapIndices: [curIdx, numsLessTotal],\r\n            });\r\n          }\r\n          if (curIdx !== numsLessTotal) {\r\n            curNum = nums[numsLessTotal];\r\n            nums[numsLessTotal] = nums[curIdx] ^ nums[numsLessTotal];\r\n            nums[curIdx] = nums[curIdx] ^ nums[numsLessTotal];\r\n            nums[numsLessTotal] = nums[curIdx] ^ nums[numsLessTotal];\r\n            numActions.push({\r\n              toggle: true,\r\n              toggleIndices: [curIdx, numsLessTotal],\r\n            });\r\n            numActions.push({\r\n              swap: true,\r\n              swapIndices: [curIdx, numsLessTotal],\r\n            });\r\n          }\r\n        }\r\n      }\r\n      nums[curIdx] = curNum;\r\n      curIdx++;\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  // radixSort: sort numbers from LSB to MSB (decimal base)\r\n  radixSort: function (numbers) {\r\n    let numActions = [];\r\n    let nums = [...numbers];\r\n    let length = nums.length;\r\n\r\n    let divisor = 10;\r\n    let prevDivisor = 1;\r\n    let digits = [];\r\n    for (let digit = -9; digit <= 9; digit++) {\r\n      digits.push(digit);\r\n    }\r\n\r\n    let noMoreDigits = false;\r\n    while (!noMoreDigits) {\r\n      noMoreDigits = true;\r\n\r\n      // count number of appearance for each digit (-9 ~ 9)\r\n      let counts = new Array(digits.length).fill(0);\r\n      for (let idx = 0; idx < length; idx++) {\r\n        numActions.push({\r\n          swap: false,\r\n          swapIndices: [idx],\r\n        });\r\n        let digitIdx = digits.indexOf(\r\n          ((nums[idx] % divisor) - (nums[idx] % prevDivisor)) / prevDivisor\r\n        );\r\n        counts[digitIdx]++;\r\n        if (\r\n          noMoreDigits &&\r\n          (nums[idx] % (divisor * 10)) - (nums[idx] % divisor) !== 0\r\n        ) {\r\n          noMoreDigits = false;\r\n        }\r\n      }\r\n      // find correct positions of each digit based on total counts of prev digits\r\n      for (let idx = 1; idx < counts.length; idx++) {\r\n        counts[idx] += counts[idx - 1];\r\n      }\r\n      // put numbers in their correct position in a new array\r\n      let newNums = [...nums];\r\n      for (let idx = length - 1; idx >= 0; idx--) {\r\n        let curNum = nums[idx];\r\n        let digitIdx = digits.indexOf(\r\n          ((curNum % divisor) - (curNum % prevDivisor)) / prevDivisor\r\n        );\r\n        let targetIdx = counts[digitIdx] - 1;\r\n        numActions.push({\r\n          toggle: true,\r\n          toggleIndices: [targetIdx],\r\n          set: true,\r\n          setIndices: [targetIdx],\r\n          setHeights: [curNum],\r\n        });\r\n        newNums[targetIdx] = curNum;\r\n        counts[digitIdx]--;\r\n      }\r\n      // keep going for the next more significant bit\r\n      nums = newNums;\r\n      prevDivisor = divisor;\r\n      divisor *= 10;\r\n    }\r\n\r\n    return { numsSorted: nums, numActions };\r\n  },\r\n\r\n  mergeSort: function (nums, range = [0, nums.length - 1], numActions = []) {\r\n    let numsTotal = nums.length;\r\n    let actions = [];\r\n\r\n    // base cases\r\n    if (numsTotal === 1) {\r\n      actions.push({\r\n        swap: false,\r\n        swapIndices: [range[0]],\r\n        set: true,\r\n        setIndices: [range[0]],\r\n        setHeights: [nums],\r\n      });\r\n      return { numsSorted: nums, range: [range[0]], numActions: [] };\r\n    }\r\n    if (numsTotal === 2) {\r\n      if (nums[0] > nums[1]) {\r\n        nums = nums.reverse();\r\n      }\r\n      for (let idx = 0; idx < numsTotal; idx++) {\r\n        actions.push({\r\n          swap: false,\r\n          swapIndices: [range[0] + idx],\r\n          set: true,\r\n          setIndices: [],\r\n          setHeights: [nums[idx]],\r\n        });\r\n      }\r\n      return { numsSorted: nums, range, numActions: actions };\r\n    }\r\n\r\n    // recursively call mergeSort on left and right subarray\r\n    let middleIdx = Math.floor(numsTotal / 2);\r\n    let {\r\n      numsSorted: numsSortedLeft,\r\n      numActions: actionsLeft,\r\n    } = this.mergeSort(nums.slice(0, middleIdx), [\r\n      range[0],\r\n      range[0] + middleIdx - 1,\r\n    ]);\r\n    let {\r\n      numsSorted: numsSortedRight,\r\n      numActions: actionsRight,\r\n    } = this.mergeSort(nums.slice(middleIdx), [range[0] + middleIdx, range[1]]);\r\n    // store sorting actions returned by mergeSort on subarrays\r\n    numActions = numActions.concat([...actionsLeft, ...actionsRight]);\r\n\r\n    // merge left and right sorted subarray to a single array\r\n    let numLeftIdx = 0;\r\n    let numRightIdx = 0;\r\n    let numsSorted = [];\r\n    // put nums from two subarrays into one array\r\n    while (\r\n      numLeftIdx < numsSortedLeft.length &&\r\n      numRightIdx < numsSortedRight.length\r\n    ) {\r\n      let numLeft = numsSortedLeft[numLeftIdx];\r\n      let numRight = numsSortedRight[numRightIdx];\r\n      if (numLeft < numRight) {\r\n        numsSorted.push(numLeft);\r\n        numLeftIdx++;\r\n      } else {\r\n        numsSorted.push(numRight);\r\n        numRightIdx++;\r\n      }\r\n    }\r\n    if (numLeftIdx < numsSortedLeft.length) {\r\n      for (let idx = numLeftIdx; idx < numsSortedLeft.length; idx++) {\r\n        numsSorted.push(numsSortedLeft[idx]);\r\n      }\r\n    } else {\r\n      for (let idx = numRightIdx; idx < numsSortedRight.length; idx++) {\r\n        numsSorted.push(numsSortedRight[idx]);\r\n      }\r\n    }\r\n    // return sorting actions for animation\r\n    for (let idx = 0; idx < numsSorted.length; idx++) {\r\n      numActions.push({\r\n        swap: false,\r\n        swapIndices: [range[0] + idx],\r\n        set: true,\r\n        setIndices: [range[0] + idx],\r\n        setHeights: [numsSorted[idx]],\r\n      });\r\n    }\r\n\r\n    return { numsSorted, range, numActions };\r\n  },\r\n\r\n  quickSort: function (nums, range = [0, nums.length - 1], numActions = []) {\r\n    nums = [...nums];\r\n    let length = nums.length;\r\n    // base cases\r\n    if (length === 2) {\r\n      let numsSorted = [];\r\n      let numAction = {};\r\n      if (nums[0] <= nums[1]) {\r\n        numsSorted = nums;\r\n        numAction = { swap: false, swapIndices: [range[0], range[1]] };\r\n      } else {\r\n        numsSorted = nums.reverse();\r\n        numAction = { swap: true, swapIndices: [range[0], range[1]] };\r\n      }\r\n      numActions.push(numAction);\r\n      return { numsSorted, range, numActions };\r\n    }\r\n\r\n    // recursive calls\r\n    let pivotIdx = length - 1;\r\n    numActions.push({ toggle: true, toggleIndices: [range[0] + pivotIdx] });\r\n    let numLeftIdx = 0;\r\n    let numRightIdx = pivotIdx - 1;\r\n    numActions.push({\r\n      swap: false,\r\n      swapIndices: [range[0] + numLeftIdx, range[0] + numRightIdx],\r\n    });\r\n\r\n    while (numLeftIdx < numRightIdx) {\r\n      let numAction = {\r\n        swap: false,\r\n        swapIndices: [range[0] + numLeftIdx, range[0] + numRightIdx],\r\n      };\r\n      // find a number on the left that > pivot number\r\n      if (nums[numLeftIdx] <= nums[pivotIdx]) {\r\n        numLeftIdx++;\r\n        numAction.swapIndices[0]++;\r\n      }\r\n      // fing a number on the right that < pivot number\r\n      else if (nums[numRightIdx] >= nums[pivotIdx]) {\r\n        numRightIdx--;\r\n        numAction.swapIndices[1]--;\r\n      }\r\n      // swap these two numbers so that newLeft < pivotNum < newRight\r\n      else {\r\n        nums[numLeftIdx] = nums[numLeftIdx] ^ nums[numRightIdx];\r\n        nums[numRightIdx] = nums[numLeftIdx] ^ nums[numRightIdx];\r\n        nums[numLeftIdx] = nums[numLeftIdx] ^ nums[numRightIdx];\r\n        numAction.swap = true;\r\n      }\r\n      numActions.push(numAction);\r\n    }\r\n    // check the number at idx = numLeftIdx = numRightIdx\r\n    let pivotNum = nums[pivotIdx];\r\n    if (nums[numLeftIdx] <= pivotNum) {\r\n      pivotIdx = numLeftIdx + 1;\r\n    } else {\r\n      pivotIdx = numLeftIdx;\r\n    }\r\n    // move pivot number to its correct position so that lefts < pivot < rights\r\n    for (let idx = length - 1; idx > pivotIdx; idx--) {\r\n      nums[idx] = nums[idx - 1];\r\n      numActions.push({\r\n        swap: false,\r\n        swapIndices: [range[0] + idx - 1, range[0] + idx],\r\n        set: true,\r\n        setIndices: [range[0] + idx],\r\n        setHeights: [nums[idx - 1]],\r\n      });\r\n    }\r\n    nums[pivotIdx] = pivotNum;\r\n    numActions.push({\r\n      toggle: true,\r\n      toggleIndices: [range[0] + pivotIdx],\r\n      set: true,\r\n      setIndices: [range[0] + pivotIdx],\r\n      setHeights: [pivotNum],\r\n    });\r\n\r\n    let numsSortedLeft = nums.slice(0, pivotIdx);\r\n    if (pivotIdx > 1) {\r\n      let obj = this.quickSort(\r\n        numsSortedLeft,\r\n        [range[0], range[0] + pivotIdx - 1],\r\n        numActions\r\n      );\r\n      numsSortedLeft = obj.numsSorted;\r\n      numActions = obj.numActions;\r\n    }\r\n    let numsSortedRight = nums.slice(pivotIdx + 1, length);\r\n    if (pivotIdx < length - 2) {\r\n      let obj = this.quickSort(\r\n        numsSortedRight,\r\n        [range[0] + pivotIdx + 1, range[1]],\r\n        numActions\r\n      );\r\n      numsSortedRight = obj.numsSorted;\r\n      numActions = obj.numActions;\r\n    }\r\n    nums = [...numsSortedLeft, pivotNum, ...numsSortedRight];\r\n\r\n    return {\r\n      numsSorted: nums,\r\n      range,\r\n      numActions,\r\n    };\r\n  },\r\n};\r\n\r\nexport default sortingAlgos;\r\n","import sortingAlgos from \"../sortingAlgos\";\r\n\r\nconst buttons = {\r\n  sortingAlgoNames: Object.keys(sortingAlgos),\r\n  settings: [\"speed\", \"numsTotal\", \"sortingAlgo\"],\r\n  disableSettingButtons: function (disable) {\r\n    this.settings.forEach((setting) => {\r\n      let buttonName = `set${setting[0].toUpperCase()}${setting.substr(1)}`;\r\n      document.querySelector(`#button-${buttonName}`).disabled = disable;\r\n      document.querySelector(`#input-${setting}`).disabled = disable;\r\n    });\r\n  },\r\n  reloadSettings: function () {\r\n    this.settings.forEach((setting) => {\r\n      if (setting !== \"sortingAlgo\")\r\n        document.querySelector(`#input-${setting}`).value = \"\";\r\n    });\r\n  },\r\n};\r\n\r\nexport default buttons;\r\n","import numBarsConstants from \"../constants/numBarsConstants\";\r\n\r\nconst { colorBlue, NUMBER_MAX, NUMBER_MIN, CANVAS_HEIGHT } = numBarsConstants;\r\n\r\nconst numBars = {\r\n  setBarColor: function (idx, color) {\r\n    document.querySelector(`#number${idx}`).style.backgroundColor = color;\r\n  },\r\n  toggleBarColor: function (idx, targetColor) {\r\n    if (\r\n      document.querySelector(`#number${idx}`).style.backgroundColor !==\r\n      colorBlue\r\n    ) {\r\n      this.setBarColor(idx, colorBlue);\r\n    } else {\r\n      this.setBarColor(idx, targetColor);\r\n    }\r\n  },\r\n  setBarHeight: function (idx, height) {\r\n    let barStyle = document.querySelector(`#number${idx}`).style;\r\n    barStyle.height = `${height}px`;\r\n    barStyle.borderTopWidth = `${CANVAS_HEIGHT - height}px`;\r\n  },\r\n  resetNumbers: function (returnNumbers = false, numsTotal = 100) {\r\n    let numBarElements = document.querySelectorAll(\".number-bar\");\r\n    numBarElements.forEach((numBar) => {\r\n      if (numBar.style.backgroundColor !== colorBlue) {\r\n        numBar.style.backgroundColor = colorBlue;\r\n      }\r\n    });\r\n    document.querySelector(\"#button-start\").disabled = true;\r\n\r\n    let newNumbers = [];\r\n    for (let i = 0; i < numsTotal; i++) {\r\n      let newNumber = Math.floor(\r\n        Math.random() * (NUMBER_MAX - NUMBER_MIN) + NUMBER_MIN\r\n      );\r\n      newNumbers.push(newNumber);\r\n    }\r\n    //setNumbers(newNumbers)\r\n    //setSortingAlgo(\"\")\r\n    // buttons.disableSettingButtons(false)\r\n\r\n    return returnNumbers ? newNumbers : null;\r\n  },\r\n};\r\n\r\nexport default numBars;\r\n","import numBars from \"./numBars\";\r\nimport buttons from \"./buttons\";\r\nimport sortingAlgos from \"../sortingAlgos\";\r\nimport numBarsConstants from \"../constants/numBarsConstants\";\r\n\r\nclass Animator {\r\n  constructor() {\r\n    this.animeProgressID = null;\r\n    this.constants = numBarsConstants;\r\n    this.numbers = [];\r\n    this.speed = 25;\r\n  }\r\n\r\n  setAnimeProgressID = (newProgressID) => {\r\n    this.animeProgressID = newProgressID;\r\n  };\r\n\r\n  setNumbers = (newNumbers) => {\r\n    this.numbers = newNumbers;\r\n  };\r\n\r\n  setSpeed = (newSpeed) => {\r\n    this.speed = newSpeed;\r\n  };\r\n\r\n  start = (algo) => {\r\n    buttons.disableSettingButtons(true);\r\n    buttons.reloadSettings();\r\n    this.sortingAnime(algo);\r\n  };\r\n\r\n  stop = () => {\r\n    if (this.animeProgressID) {\r\n      clearInterval(this.animeProgressID);\r\n      this.setAnimeProgressID(null);\r\n    }\r\n    // setSortingAlgo(\"\")\r\n    buttons.disableSettingButtons(false);\r\n  };\r\n\r\n  sortingAnime = (algo) => {\r\n    let { numActions: actions } = sortingAlgos[algo](this.numbers);\r\n    let lastAction = actions[0];\r\n    let newProgressID = setInterval(() => {\r\n      let action = actions.shift();\r\n      if (lastAction.swap !== undefined) {\r\n        for (let idx of lastAction.swapIndices) {\r\n          numBars.setBarColor(idx, this.constants.colorBlue);\r\n        }\r\n      } else if (lastAction.set !== undefined) {\r\n        for (let idx of lastAction.setIndices) {\r\n          numBars.setBarColor(idx, this.constants.colorBlue);\r\n        }\r\n      }\r\n      // if no further action, stop animation and reset buttons\r\n      if (action === undefined) {\r\n        this.stop();\r\n        return;\r\n      }\r\n      // swap numbers if requested\r\n      if (action.swap !== undefined) {\r\n        let indices = action.swapIndices;\r\n        for (let idx of indices) {\r\n          numBars.setBarColor(idx, this.constants.colorOrange);\r\n        }\r\n        if (action.swap) {\r\n          let height1 = this.numbers[indices[0]];\r\n          let height2 = this.numbers[indices[1]];\r\n          numBars.setBarHeight(indices[0], height2);\r\n          numBars.setBarHeight(indices[1], height1);\r\n          this.numbers[indices[0]] = height2;\r\n          this.numbers[indices[1]] = height1;\r\n        }\r\n      }\r\n      // set target numbers if requested\r\n      if (action.set !== undefined) {\r\n        let indices = action.setIndices;\r\n        let heights = action.setHeights;\r\n        for (let idx = 0; idx < indices.length; idx++) {\r\n          numBars.setBarHeight(indices[idx], heights[idx]);\r\n          //numBars.setBarColor(indices[idx], colorOrange);\r\n          this.numbers[indices[idx]] = heights[idx];\r\n        }\r\n      }\r\n      // highlight target numbers if requested\r\n      if (action.toggle !== undefined) {\r\n        let indices = action.toggleIndices;\r\n        for (let idx of indices) {\r\n          numBars.toggleBarColor(idx, this.constants.colorViolet);\r\n        }\r\n      }\r\n      lastAction = action;\r\n    }, this.speed);\r\n    this.setAnimeProgressID(newProgressID);\r\n    document.querySelector(\"#button-start\").disabled = true;\r\n  };\r\n}\r\n\r\nexport default Animator;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./css/App.css\";\nimport Numbers from \"./components/Numbers\";\nimport Buttons from \"./components/Buttons\";\nimport Messages from \"./components/Messages\";\nimport numBarsConstants from \"./constants/numBarsConstants\";\nimport buttons from \"./utils/buttons\";\nimport numBars from \"./utils/numBars\";\nimport Animator from \"./utils/animator\";\n\nfunction App() {\n  // state values\n  const [numbers, setNumbers] = useState([]);\n  const [numsTotal, setNumsTotal] = useState(100);\n  const [sortingAlgo, setSortingAlgo] = useState(\"\");\n  const [speed, setSpeed] = useState(25);\n\n  // imported color codes and design related constants\n  const { colorGrey, CANVAS_HEIGHT } = numBarsConstants;\n\n  // animator object\n  const animator = new Animator();\n\n  // reset everything at start up and whenever numsTotal changes\n  useEffect(() => {\n    let newNumbers = numBars.resetNumbers(true, numsTotal);\n    setNumbers(newNumbers);\n    setSortingAlgo(\"\");\n    buttons.disableSettingButtons(false);\n  }, [numsTotal]);\n\n  const handlers = {\n    refresh: (sorted = false) => {\n      let newNumbers = numBars.resetNumbers(true);\n      if (sorted) {\n        newNumbers.sort((a, b) => a - b);\n      }\n      setNumbers(newNumbers);\n      animator.stop();\n      animator.setNumbers(newNumbers);\n      animator.setSpeed(speed);\n      setSortingAlgo(\"\");\n      buttons.disableSettingButtons(false);\n    },\n    setSpeed: () => {\n      let value = document.querySelector(\"#input-speed\").value;\n      if (value > 0) {\n        setSpeed(value);\n      } else {\n        alert(\"Please enter a number greater than 0\");\n      }\n      animator.setSpeed(value);\n      buttons.reloadSettings();\n    },\n    setNumsTotal: () => {\n      let value = document.querySelector(\"#input-numsTotal\").value;\n      if (value > 0 && value <= 280) {\n        setNumsTotal(value);\n      } else {\n        alert(\"Please enter a number between 0 ~ 280\");\n      }\n      buttons.reloadSettings();\n    },\n    setSortingAlgo: () => {\n      setSortingAlgo(document.querySelector(\"#input-sortingAlgo\").value);\n      document.querySelector(\"#button-start\").disabled = false;\n    },\n    start: () => {\n      animator.setNumbers(numbers);\n      animator.start(sortingAlgo);\n    },\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"title-container\">\n        <p className=\"title-h1\">Sorting Algorithms Visualizer</p>\n        <p className=\"title-h2\">github/allenfeng2014</p>\n      </div>\n      <Numbers {...{ numbers, CANVAS_HEIGHT, colorGrey }} />\n      <Buttons\n        {...{\n          speed,\n          numsTotal,\n          sortingAlgoNames: buttons.sortingAlgoNames,\n          handlers,\n        }}\n      />\n      <Messages {...{ speed, sortingAlgo, numsTotal }} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}