[{"E:\\Allen Feng\\Programming Projects\\Javascript\\ReactJS\\sorting-algo-visualizer\\src\\index.js":"1","E:\\Allen Feng\\Programming Projects\\Javascript\\ReactJS\\sorting-algo-visualizer\\src\\App.js":"2","E:\\Allen Feng\\Programming Projects\\Javascript\\ReactJS\\sorting-algo-visualizer\\src\\Numbers.js":"3","E:\\Allen Feng\\Programming Projects\\Javascript\\ReactJS\\sorting-algo-visualizer\\src\\sortingAlgos.js":"4"},{"size":146,"mtime":1609529053946,"results":"5","hashOfConfig":"6"},{"size":145,"mtime":1609531357772,"results":"7","hashOfConfig":"6"},{"size":4730,"mtime":1609565170913,"results":"8","hashOfConfig":"6"},{"size":1445,"mtime":1609565042966,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"19naahq",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Allen Feng\\Programming Projects\\Javascript\\ReactJS\\sorting-algo-visualizer\\src\\index.js",[],["20","21"],"E:\\Allen Feng\\Programming Projects\\Javascript\\ReactJS\\sorting-algo-visualizer\\src\\App.js",[],"E:\\Allen Feng\\Programming Projects\\Javascript\\ReactJS\\sorting-algo-visualizer\\src\\Numbers.js",["22","23","24","25"],"import { useState, useEffect } from \"react\";\r\nimport \"./css/Numbers.css\";\r\nimport sortingAlgos from \"./sortingAlgos\";\r\n\r\nfunction Numbers() {\r\n  const [numbers, setNumbers] = useState([]);\r\n  const [numbersTotal, setNumbersTotal] = useState(200);\r\n  const [sortingAlgo, setSortingAlgo] = useState(\" \");\r\n  const [animeSpeed, setAnimeSpeed] = useState(50);\r\n  const [animeProgressID, setAnimeProgressID] = useState(null);\r\n\r\n  // color codes\r\n  const colorOrange = \"rgb(247, 116, 45)\";\r\n  const colorBlue = \"rgb(49, 109, 165)\";\r\n  const colorGrey = \"rgb(224, 224, 224)\";\r\n  const colorViolet = \"rgb(220, 58, 252)\";\r\n\r\n  // function for resetting numbers\r\n  const resetNumbers = () => {\r\n    if (animeProgressID !== null) {\r\n      clearInterval(animeProgressID);\r\n      for (let i = 0; i < numbersTotal; i++) {\r\n        let barStyle = document.getElementById(`number${i}`).style;\r\n        if (barStyle.backgroundColor === colorBlue) {\r\n          continue;\r\n        }\r\n        barStyle.backgroundColor = colorBlue;\r\n      }\r\n    }\r\n    document.getElementById(\"button-start\").disabled = true;\r\n\r\n    let newNumbers = [];\r\n    for (let i = 0; i < numbersTotal; i++) {\r\n      let newNumber = Math.floor(Math.random() * 795 + 5);\r\n      newNumbers.push(newNumber);\r\n    }\r\n    setNumbers(newNumbers);\r\n  };\r\n\r\n  // function for changing number bar color\r\n  const setBarColor = (idx, color) => {\r\n    document.getElementById(`number${idx}`).style.backgroundColor = color;\r\n  };\r\n\r\n  // function for changing number bar height\r\n  const setBarHeight = (idx, height) => {\r\n    let barStyle = document.getElementById(`number${idx}`).style;\r\n    barStyle.height = `${height}px`;\r\n    barStyle.borderTopWidth = `${900 - height}px`;\r\n  };\r\n\r\n  // function for visualizing bubble sort\r\n  const sortingAnime = (nums, algo) => {\r\n    let actions = sortingAlgos[algo](nums);\r\n    let lastAction = actions[0];\r\n    let intervalID = setInterval(() => {\r\n      let action = actions.shift();\r\n      if (action === undefined) {\r\n        clearInterval(animeProgressID);\r\n      }\r\n      for (let idx of lastAction.indices) {\r\n        setBarColor(idx, colorBlue);\r\n      }\r\n      let indices = action.indices;\r\n      for (let idx of indices) {\r\n        setBarColor(idx, colorOrange);\r\n      }\r\n      if (action.swap) {\r\n        let height1 = numbers[indices[0]];\r\n        let height2 = numbers[indices[1]];\r\n        setBarHeight(indices[0], height2);\r\n        setBarHeight(indices[1], height1);\r\n        numbers[indices[0]] = height2;\r\n        numbers[indices[1]] = height1;\r\n      }\r\n      lastAction = action;\r\n    }, animeSpeed);\r\n    setAnimeProgressID(intervalID);\r\n    document.getElementById(\"button-start\").disabled = true;\r\n  };\r\n\r\n  // reset numbers at start up\r\n  useEffect(() => {\r\n    resetNumbers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(sortingAlgo);\r\n  }, [sortingAlgo]);\r\n\r\n  return (\r\n    <div id=\"visualizer-container\">\r\n      <div id=\"numbers-container\">\r\n        {numbers.map((number, idx) => (\r\n          <span\r\n            className=\"number-bar\"\r\n            id={`number${idx}`}\r\n            key={idx}\r\n            style={{\r\n              height: `${number}px`,\r\n              borderTop: `${900 - number}px solid ${colorGrey}`,\r\n            }}\r\n          ></span>\r\n        ))}\r\n      </div>\r\n      <div id=\"buttons-container\">\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-refresh\"\r\n          style={{\r\n            width: \"50px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={resetNumbers}\r\n        >\r\n          Refresh\r\n        </button>\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-bubbleSort\"\r\n          style={{\r\n            width: \"100px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            setSortingAlgo(\"bubbleSort\");\r\n            document.getElementById(\"button-start\").disabled = false;\r\n          }}\r\n        >\r\n          Bubble Sort\r\n        </button>\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-insertionSort\"\r\n          style={{\r\n            width: \"100px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            setSortingAlgo(\"insertionSort\");\r\n            document.getElementById(\"button-start\").disabled = false;\r\n          }}\r\n        >\r\n          Insertion Sort\r\n        </button>\r\n        <button\r\n          className=\"button\"\r\n          id=\"button-start\"\r\n          style={{\r\n            width: \"50px\",\r\n            height: \"30px\",\r\n          }}\r\n          onClick={() => {\r\n            sortingAnime(numbers, sortingAlgo);\r\n          }}\r\n        >\r\n          Start\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Numbers;\r\n","E:\\Allen Feng\\Programming Projects\\Javascript\\ReactJS\\sorting-algo-visualizer\\src\\sortingAlgos.js",[],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":7,"column":24,"nodeType":"32","messageId":"33","endLine":7,"endColumn":39},{"ruleId":"30","severity":1,"message":"34","line":9,"column":22,"nodeType":"32","messageId":"33","endLine":9,"endColumn":35},{"ruleId":"30","severity":1,"message":"35","line":16,"column":9,"nodeType":"32","messageId":"33","endLine":16,"endColumn":20},{"ruleId":"36","severity":1,"message":"37","line":85,"column":6,"nodeType":"38","endLine":85,"endColumn":8,"suggestions":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'setNumbersTotal' is assigned a value but never used.","Identifier","unusedVar","'setAnimeSpeed' is assigned a value but never used.","'colorViolet' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetNumbers'. Either include it or remove the dependency array.","ArrayExpression",["42"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [resetNumbers]",{"range":"45","text":"46"},[2794,2796],"[resetNumbers]"]